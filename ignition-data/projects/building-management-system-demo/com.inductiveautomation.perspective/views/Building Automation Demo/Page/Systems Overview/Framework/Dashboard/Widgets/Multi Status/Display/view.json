{
  "custom": {},
  "params": {
    "beingEdited": false,
    "mobile": "",
    "tags": [],
    "widgetID": -1,
    "widgetTitle": ""
  },
  "propConfig": {
    "custom.refresh": {
      "persistent": true
    },
    "custom.tagPath": {
      "persistent": true
    },
    "custom.tagValue": {
      "persistent": true
    },
    "custom.testing": {
      "persistent": true
    },
    "params.alarmInfo": {
      "paramDirection": "input",
      "persistent": true
    },
    "params.beingEdited": {
      "paramDirection": "input",
      "persistent": true
    },
    "params.color": {
      "paramDirection": "input",
      "persistent": true
    },
    "params.colors": {
      "paramDirection": "input",
      "persistent": true
    },
    "params.floorNumber": {
      "paramDirection": "input",
      "persistent": true
    },
    "params.fontSize": {
      "paramDirection": "input",
      "persistent": true
    },
    "params.group": {
      "paramDirection": "input",
      "persistent": true
    },
    "params.highThreshold": {
      "paramDirection": "input",
      "persistent": true
    },
    "params.iconSize": {
      "paramDirection": "input",
      "persistent": true
    },
    "params.lowThreshold": {
      "paramDirection": "input",
      "persistent": true
    },
    "params.minutes": {
      "paramDirection": "input",
      "persistent": true
    },
    "params.mobile": {
      "paramDirection": "input",
      "persistent": true
    },
    "params.name": {
      "paramDirection": "input",
      "persistent": true
    },
    "params.numberFormat": {
      "paramDirection": "input",
      "persistent": true
    },
    "params.refresh": {
      "paramDirection": "input",
      "persistent": true
    },
    "params.showChange": {
      "paramDirection": "input",
      "persistent": true
    },
    "params.showLegend": {
      "paramDirection": "input",
      "persistent": true
    },
    "params.showName": {
      "paramDirection": "input",
      "persistent": true
    },
    "params.showPath": {
      "paramDirection": "input",
      "persistent": true
    },
    "params.showX": {
      "paramDirection": "input",
      "persistent": true
    },
    "params.showY": {
      "paramDirection": "input",
      "persistent": true
    },
    "params.tag": {
      "paramDirection": "input",
      "persistent": true
    },
    "params.tagInfo": {
      "paramDirection": "input",
      "persistent": true
    },
    "params.tags": {
      "paramDirection": "input",
      "persistent": true
    },
    "params.type": {
      "paramDirection": "input",
      "persistent": true
    },
    "params.unit": {
      "paramDirection": "input",
      "persistent": true
    },
    "params.units": {
      "paramDirection": "input",
      "persistent": true
    },
    "params.widgetID": {
      "paramDirection": "input",
      "persistent": true
    },
    "params.widgetTitle": {
      "paramDirection": "input",
      "persistent": true
    }
  },
  "props": {
    "defaultSize": {
      "height": 203,
      "width": 258
    }
  },
  "root": {
    "children": [
      {
        "children": [
          {
            "meta": {
              "name": "Title"
            },
            "position": {
              "grow": 1,
              "shrink": 0
            },
            "propConfig": {
              "props.style.color": {
                "binding": {
                  "config": {
                    "expression": "if({session.props.theme}\u003d\u0027hvac-dark\u0027 || {session.props.theme}\u003d\u0027hvac-dark-warm\u0027,\u0027--neutral-10\u0027,\u0027--neutral-60\u0027)"
                  },
                  "type": "expr"
                }
              },
              "props.text": {
                "binding": {
                  "config": {
                    "path": "view.params.widgetTitle"
                  },
                  "type": "property"
                }
              }
            },
            "props": {
              "style": {
                "fontSize": "15px",
                "fontWeight": "bold",
                "marginLeft": "8px"
              }
            },
            "type": "ia.display.label"
          }
        ],
        "meta": {
          "name": "Header"
        },
        "position": {
          "basis": "25px",
          "shrink": 0
        },
        "props": {
          "justify": "space-between",
          "style": {
            "marginTop": "5px",
            "overflow": "hidden"
          }
        },
        "type": "ia.container.flex"
      },
      {
        "children": [
          {
            "meta": {
              "name": "Names"
            },
            "position": {
              "grow": 1,
              "shrink": 0
            },
            "propConfig": {
              "props.instances": {
                "binding": {
                  "config": {
                    "struct": {
                      "mobile": "{view.params.mobile}",
                      "tags": "{view.params.tags}"
                    },
                    "waitOnAll": true
                  },
                  "transforms": [
                    {
                      "code": "\t# Create instances for flex repeater based on tagInfo objects in \u0027tags\u0027 param.\n\t\n\tinstances \u003d []\n\t\n\tfor tag in value[\u0027tags\u0027]:\n\t\tac \u003d tag[\u0027ac\u0027]\n\t\tcompressor \u003d tag[\u0027compressor\u0027]\n\t\tname \u003d tag[\u0027name\u0027]\n\t\tnameOverride \u003d tag[\u0027nameOverride\u0027]\n\t\tpath \u003d tag[\u0027path\u0027]\n\t\ttype \u003d tag[\u0027type\u0027]\n\t\t\n\t\tinstance \u003d ({\"instanceStyle\": {\"classes\": \"\"},\"instancePosition\": {},\"ac\": ac,\"compressor\": compressor,\n\t\t\"name\": name,\"nameOverride\": nameOverride,\"path\": path,\"type\": type,\"mobile\": value[\u0027mobile\u0027]})\n\t\t\n\t\tinstances.append(instance)\n\t\t\n\treturn instances",
                      "type": "script"
                    }
                  ],
                  "type": "expr-struct"
                }
              },
              "props.style.marginLeft": {
                "binding": {
                  "config": {
                    "struct": {
                      "instances": "{../Values.props.instances}",
                      "mobile": "{view.params.mobile}"
                    },
                    "waitOnAll": true
                  },
                  "transforms": [
                    {
                      "code": "\tif value[\u0027mobile\u0027] \u003d\u003d True:\n\t\treturn \u00270px\u0027\n\telse:\n\t\tfor instance in value[\u0027instances\u0027]:\n\t\t\tif instance[\u0027editable\u0027] \u003d\u003d False:\n\t\t\t\treturn \u00270px\u0027\n\t\treturn \u002715px\u0027",
                      "type": "script"
                    }
                  ],
                  "type": "expr-struct"
                }
              }
            },
            "props": {
              "alignContent": "center",
              "direction": "column",
              "elementPosition": {
                "basis": "auto",
                "shrink": 0
              },
              "path": "Building Automation Demo/Page/Systems Overview/Framework/Dashboard/Widgets/Multi Status/Name",
              "style": {
                "overflow": "hidden"
              },
              "useDefaultViewHeight": false,
              "useDefaultViewWidth": false
            },
            "type": "ia.display.flex-repeater"
          },
          {
            "meta": {
              "name": "Values"
            },
            "position": {
              "shrink": 0
            },
            "propConfig": {
              "position.grow": {
                "binding": {
                  "config": {
                    "path": "this.props.instances"
                  },
                  "transforms": [
                    {
                      "code": "\tfor instance in value:\n\t\tif instance[\u0027editable\u0027] \u003d\u003d False:\n\t\t\treturn 1.35\n\treturn 1",
                      "type": "script"
                    }
                  ],
                  "type": "property"
                }
              },
              "props.instances": {
                "binding": {
                  "config": {
                    "struct": {
                      "mobile": "{view.params.mobile}",
                      "tags": "{view.params.tags}"
                    },
                    "waitOnAll": true
                  },
                  "transforms": [
                    {
                      "code": "\t# Create instances for flex repeater based on tagInfo objects in \u0027tags\u0027 param.\n\t\n\tinstances \u003d []\n\t\n\tfor tag in value[\u0027tags\u0027]:\n\t\tac \u003d tag[\u0027ac\u0027]\n\t\tcompressor \u003d tag[\u0027compressor\u0027]\n\t\thighThreshold \u003d tag[\u0027highThreshold\u0027]\n\t\tlowThreshold \u003d tag[\u0027lowThreshold\u0027]\n\t\tmappings \u003d tag[\u0027mappings\u0027]\n\t\tnumberFormat \u003d tag[\u0027numberFormat\u0027]\n\t\tpath \u003d tag[\u0027path\u0027]\n\t\ttype \u003d tag[\u0027type\u0027]\n\t\tunits \u003d tag[\u0027units\u0027]\n\t\teditable \u003d tag[\u0027editable\u0027]\n\t\t\n\t\tif \u0027BMS\u0027 not in path:\n\t\t\tpath \u003d \u0027[default]BMS/\u0027 + path\n\t\t\n\t\tinstance \u003d ({\"instanceStyle\": {\"classes\": \"\"},\"instancePosition\": {},\"ac\": ac,\"compressor\": compressor,\"highThreshold\": highThreshold,\n\t\t\"lowThreshold\": lowThreshold,\"mappings\": mappings,\"numberFormat\": numberFormat,\"path\": path,\"type\": type,\"units\": units,\"mobile\": value[\u0027mobile\u0027],\n\t\t\"editable\":editable})\n\t\t\n\t\tinstances.append(instance)\n\t\t\n\treturn instances",
                      "type": "script"
                    }
                  ],
                  "type": "expr-struct"
                }
              }
            },
            "props": {
              "alignContent": "center",
              "alignItems": "center",
              "direction": "column",
              "elementPosition": {
                "basis": "auto",
                "shrink": 0
              },
              "justify": "center",
              "path": "Building Automation Demo/Page/Systems Overview/Framework/Dashboard/Widgets/Multi Status/Value",
              "style": {
                "overflow": "hidden"
              },
              "useDefaultViewHeight": false,
              "useDefaultViewWidth": false
            },
            "type": "ia.display.flex-repeater"
          }
        ],
        "meta": {
          "name": "Data Cont"
        },
        "position": {
          "basis": "200px",
          "grow": 1
        },
        "props": {
          "justify": "center",
          "style": {
            "overflow": "hidden"
          }
        },
        "type": "ia.container.flex"
      }
    ],
    "meta": {
      "name": "root",
      "tooltip": {
        "style": {
          "backgroundColor": "var(--neutral-10)",
          "color": "var(--neutral-100)"
        }
      }
    },
    "propConfig": {
      "meta.tooltip.enabled": {
        "binding": {
          "config": {
            "path": "view.params.beingEdited"
          },
          "type": "property"
        }
      },
      "meta.tooltip.text": {
        "binding": {
          "config": {
            "expression": "\u0027Widget ID: \u0027 + toStr({view.params.widgetID})"
          },
          "type": "expr"
        }
      },
      "props.style": {
        "binding": {
          "config": {
            "path": "session.props.theme"
          },
          "transforms": [
            {
              "code": "\tif value in [\u0027hvac-warm\u0027,\u0027hvac\u0027]:\n\t\treturn {\"classes\": \"\",\"overflow\": \"hidden\",\"backgroundColor\": \"var(--neutral-10)\"}\n\telse:\n\t\treturn {\"classes\": \"\",\"overflow\": \"hidden\",\"backgroundColor\": \"var(--neutral-50)\"}\n\t\t#return {\"classes\": \"\",\"overflow\": \"hidden\",\"backgroundImage\": \"linear-gradient(var(--neutral-50),var(--neutral-40))\"}",
              "type": "script"
            }
          ],
          "type": "property"
        }
      }
    },
    "props": {
      "direction": "column"
    },
    "type": "ia.container.flex"
  }
}