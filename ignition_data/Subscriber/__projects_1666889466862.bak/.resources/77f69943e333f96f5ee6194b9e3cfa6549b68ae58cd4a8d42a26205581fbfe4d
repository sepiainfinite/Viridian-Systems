{
  "custom": {},
  "params": {
    "beingEdited": false,
    "mobile": false,
    "refresh": 300000,
    "widgetID": -1,
    "widgetTitle": ""
  },
  "propConfig": {
    "custom.options[0].ac": {
      "persistent": false
    },
    "params.beingEdited": {
      "paramDirection": "input",
      "persistent": true
    },
    "params.color": {
      "paramDirection": "input",
      "persistent": true
    },
    "params.colors": {
      "paramDirection": "input",
      "persistent": true
    },
    "params.currentParams.columnSpan": {
      "persistent": false
    },
    "params.floorNumber": {
      "paramDirection": "input",
      "persistent": true
    },
    "params.group": {
      "paramDirection": "input",
      "persistent": true
    },
    "params.minutes": {
      "paramDirection": "input",
      "persistent": true
    },
    "params.mobile": {
      "paramDirection": "input",
      "persistent": true
    },
    "params.name": {
      "paramDirection": "input",
      "persistent": true
    },
    "params.refresh": {
      "paramDirection": "input",
      "persistent": true
    },
    "params.showChange": {
      "paramDirection": "input",
      "persistent": true
    },
    "params.showLegend": {
      "paramDirection": "input",
      "persistent": true
    },
    "params.showName": {
      "paramDirection": "input",
      "persistent": true
    },
    "params.showPath": {
      "paramDirection": "input",
      "persistent": true
    },
    "params.showX": {
      "paramDirection": "input",
      "persistent": true
    },
    "params.showY": {
      "paramDirection": "input",
      "persistent": true
    },
    "params.tag": {
      "paramDirection": "input",
      "persistent": true
    },
    "params.widgetID": {
      "paramDirection": "input",
      "persistent": true
    },
    "params.widgetTitle": {
      "paramDirection": "input",
      "persistent": true
    }
  },
  "props": {
    "defaultSize": {
      "height": 754,
      "width": 435
    }
  },
  "root": {
    "children": [
      {
        "children": [
          {
            "meta": {
              "name": "Title"
            },
            "position": {
              "grow": 1,
              "shrink": 0
            },
            "propConfig": {
              "props.style.color": {
                "binding": {
                  "config": {
                    "expression": "if({session.props.theme}\u003d\u0027hvac-dark\u0027 || {session.props.theme}\u003d\u0027hvac-dark-warm\u0027,\u0027--neutral-10\u0027,\u0027--neutral-60\u0027)"
                  },
                  "type": "expr"
                }
              },
              "props.text": {
                "binding": {
                  "config": {
                    "path": "view.params.widgetTitle"
                  },
                  "transforms": [
                    {
                      "code": "\t# Dislay default \u0027Activity Log\u0027 if widgetTitle param is empty.\n\t\n\tif len(value) \u003d\u003d 0:\n\t\treturn \u0027Activity Log\u0027\n\telse:\n\t\treturn value",
                      "type": "script"
                    }
                  ],
                  "type": "property"
                }
              }
            },
            "props": {
              "style": {
                "fontWeight": "bold",
                "marginLeft": "10px"
              }
            },
            "type": "ia.display.label"
          },
          {
            "meta": {
              "name": "Last Refresh"
            },
            "position": {
              "shrink": 0
            },
            "propConfig": {
              "position.display": {
                "binding": {
                  "config": {
                    "expression": "!{view.params.mobile}"
                  },
                  "type": "expr"
                }
              },
              "props.style.color": {
                "binding": {
                  "config": {
                    "expression": "if({session.props.theme}\u003d\u0027hvac-dark\u0027 || {session.props.theme}\u003d\u0027hvac-dark-warm\u0027,\u0027--neutral-80\u0027,\u0027--neutral-50\u0027)"
                  },
                  "type": "expr"
                }
              }
            },
            "props": {
              "style": {
                "fontSize": "11px",
                "marginRight": "5px"
              },
              "text": "Updated: 06Jun2022 03:41:12 PM"
            },
            "type": "ia.display.label"
          },
          {
            "events": {
              "dom": {
                "onClick": {
                  "config": {
                    "script": "\tself.parent.parent.getChild(\"events\").refreshBinding(\u0027props.instances\u0027)"
                  },
                  "scope": "G",
                  "type": "script"
                }
              }
            },
            "meta": {
              "name": "Refresh",
              "tooltip": {
                "enabled": true,
                "text": "REFRESH EVENTS"
              }
            },
            "position": {
              "basis": "22px"
            },
            "propConfig": {
              "props.fill": {
                "binding": {
                  "config": {
                    "expression": "if({session.props.theme}\u003d\u0027hvac-dark\u0027 || {session.props.theme}\u003d\u0027hvac-dark-warm\u0027,\u0027var(--neutral-20)\u0027,\u0027var(--neutral-70)\u0027)"
                  },
                  "type": "expr"
                }
              }
            },
            "props": {
              "elements": [
                {
                  "d": "M0 0h24v24H0z",
                  "fill": {
                    "paint": "none"
                  },
                  "name": "path",
                  "type": "path"
                },
                {
                  "d": "M17.65 6.35C16.2 4.9 14.21 4 12 4c-4.42 0-7.99 3.58-7.99 8s3.57 8 7.99 8c3.73 0 6.84-2.55 7.73-6h-2.08c-.82 2.33-3.04 4-5.65 4-3.31 0-6-2.69-6-6s2.69-6 6-6c1.66 0 3.14.69 4.22 1.78L13 11h7V4l-2.35 2.35z",
                  "name": "path",
                  "type": "path"
                }
              ],
              "style": {
                "cursor": "pointer",
                "marginRight": "8px"
              },
              "viewBox": "0 0 24 24"
            },
            "type": "ia.shapes.svg"
          }
        ],
        "meta": {
          "name": "Header"
        },
        "position": {
          "basis": "40px",
          "shrink": 0
        },
        "props": {
          "justify": "space-between",
          "style": {
            "overflow": "hidden"
          }
        },
        "type": "ia.container.flex"
      },
      {
        "meta": {
          "name": "Last Refresh"
        },
        "position": {
          "shrink": 0
        },
        "propConfig": {
          "position.display": {
            "binding": {
              "config": {
                "expression": "{view.params.mobile}"
              },
              "type": "expr"
            }
          }
        },
        "props": {
          "style": {
            "color": "--neutral-80",
            "fontSize": "11px",
            "marginBottom": "10px",
            "marginLeft": "10px",
            "marginRight": "10px"
          },
          "text": "Updated: 07Mar2022 02:35:50 PM"
        },
        "type": "ia.display.label"
      },
      {
        "children": [
          {
            "events": {
              "dom": {
                "onClick": {
                  "config": {
                    "script": "\tself.parent.custom.selected \u003d 0"
                  },
                  "scope": "G",
                  "type": "script"
                }
              }
            },
            "meta": {
              "name": "All"
            },
            "propConfig": {
              "custom.selected": {
                "binding": {
                  "config": {
                    "expression": "{parent.custom.selected}\u003d0"
                  },
                  "type": "expr"
                }
              },
              "props.style.borderBottomStyle": {
                "binding": {
                  "config": {
                    "expression": "if({this.custom.selected}\u003dtrue,\u0027solid\u0027,\u0027none\u0027)"
                  },
                  "type": "expr"
                }
              },
              "props.style.color": {
                "binding": {
                  "config": {
                    "expression": "if({session.props.theme}\u003d\u0027hvac-dark\u0027 || {session.props.theme}\u003d\u0027hvac-dark-warm\u0027,\r\nif({this.custom.selected}\u003dtrue,\u0027--neutral-100\u0027,\u0027--neutral-70\u0027),\r\nif({this.custom.selected}\u003dtrue,\u0027--neutral-100\u0027,\u0027--neutral-40\u0027))"
                  },
                  "type": "expr"
                }
              },
              "props.style.cursor": {
                "binding": {
                  "config": {
                    "expression": "if({this.custom.selected}\u003dtrue,\u0027auto\u0027,\u0027pointer\u0027)"
                  },
                  "type": "expr"
                }
              }
            },
            "props": {
              "style": {
                "borderBottomColor": "--neutral-100",
                "borderBottomWidth": "2px",
                "fontWeight": "bold"
              },
              "text": "All"
            },
            "type": "ia.display.label"
          },
          {
            "events": {
              "dom": {
                "onClick": {
                  "config": {
                    "script": "\tself.parent.custom.selected \u003d 1"
                  },
                  "scope": "G",
                  "type": "script"
                }
              }
            },
            "meta": {
              "name": "Alarm Events"
            },
            "propConfig": {
              "custom.selected": {
                "binding": {
                  "config": {
                    "expression": "{parent.custom.selected}\u003d1"
                  },
                  "type": "expr"
                }
              },
              "props.style.borderBottomStyle": {
                "binding": {
                  "config": {
                    "expression": "if({this.custom.selected}\u003dtrue,\u0027solid\u0027,\u0027none\u0027)"
                  },
                  "type": "expr"
                }
              },
              "props.style.color": {
                "binding": {
                  "config": {
                    "expression": "if({session.props.theme}\u003d\u0027hvac-dark\u0027 || {session.props.theme}\u003d\u0027hvac-dark-warm\u0027,\r\nif({this.custom.selected}\u003dtrue,\u0027--neutral-100\u0027,\u0027--neutral-70\u0027),\r\nif({this.custom.selected}\u003dtrue,\u0027--neutral-100\u0027,\u0027--neutral-40\u0027))"
                  },
                  "type": "expr"
                }
              },
              "props.style.cursor": {
                "binding": {
                  "config": {
                    "expression": "if({this.custom.selected}\u003dtrue,\u0027auto\u0027,\u0027pointer\u0027)"
                  },
                  "type": "expr"
                }
              }
            },
            "props": {
              "style": {
                "borderBottomColor": "--neutral-100",
                "borderBottomWidth": "2px",
                "fontWeight": "bold",
                "marginLeft": "15px"
              },
              "text": "Alarm Events"
            },
            "type": "ia.display.label"
          },
          {
            "events": {
              "dom": {
                "onClick": {
                  "config": {
                    "script": "\tself.parent.custom.selected \u003d 2"
                  },
                  "scope": "G",
                  "type": "script"
                }
              }
            },
            "meta": {
              "name": "SP Requests"
            },
            "propConfig": {
              "custom.selected": {
                "binding": {
                  "config": {
                    "expression": "{parent.custom.selected}\u003d2"
                  },
                  "type": "expr"
                }
              },
              "props.style.borderBottomStyle": {
                "binding": {
                  "config": {
                    "expression": "if({this.custom.selected}\u003dtrue,\u0027solid\u0027,\u0027none\u0027)"
                  },
                  "type": "expr"
                }
              },
              "props.style.color": {
                "binding": {
                  "config": {
                    "expression": "if({session.props.theme}\u003d\u0027hvac-dark\u0027 || {session.props.theme}\u003d\u0027hvac-dark-warm\u0027,\r\nif({this.custom.selected}\u003dtrue,\u0027--neutral-100\u0027,\u0027--neutral-70\u0027),\r\nif({this.custom.selected}\u003dtrue,\u0027--neutral-100\u0027,\u0027--neutral-40\u0027))"
                  },
                  "type": "expr"
                }
              },
              "props.style.cursor": {
                "binding": {
                  "config": {
                    "expression": "if({this.custom.selected}\u003dtrue,\u0027auto\u0027,\u0027pointer\u0027)"
                  },
                  "type": "expr"
                }
              }
            },
            "props": {
              "style": {
                "borderBottomColor": "--neutral-100",
                "borderBottomWidth": "2px",
                "fontWeight": "bold",
                "marginLeft": "15px"
              },
              "text": "SP Requests"
            },
            "type": "ia.display.label"
          },
          {
            "events": {
              "dom": {
                "onClick": {
                  "config": {
                    "script": "\tself.parent.custom.selected \u003d 3"
                  },
                  "scope": "G",
                  "type": "script"
                }
              }
            },
            "meta": {
              "name": "Notes"
            },
            "propConfig": {
              "custom.selected": {
                "binding": {
                  "config": {
                    "expression": "{parent.custom.selected}\u003d3"
                  },
                  "type": "expr"
                }
              },
              "props.style.borderBottomStyle": {
                "binding": {
                  "config": {
                    "expression": "if({this.custom.selected}\u003dtrue,\u0027solid\u0027,\u0027none\u0027)"
                  },
                  "type": "expr"
                }
              },
              "props.style.color": {
                "binding": {
                  "config": {
                    "expression": "if({session.props.theme}\u003d\u0027hvac-dark\u0027 || {session.props.theme}\u003d\u0027hvac-dark-warm\u0027,\r\nif({this.custom.selected}\u003dtrue,\u0027--neutral-100\u0027,\u0027--neutral-70\u0027),\r\nif({this.custom.selected}\u003dtrue,\u0027--neutral-100\u0027,\u0027--neutral-40\u0027))"
                  },
                  "type": "expr"
                }
              },
              "props.style.cursor": {
                "binding": {
                  "config": {
                    "expression": "if({this.custom.selected}\u003dtrue,\u0027auto\u0027,\u0027pointer\u0027)"
                  },
                  "type": "expr"
                }
              }
            },
            "props": {
              "style": {
                "borderBottomColor": "--neutral-100",
                "borderBottomWidth": "2px",
                "fontWeight": "bold",
                "marginLeft": "15px"
              },
              "text": "Notes"
            },
            "type": "ia.display.label"
          }
        ],
        "custom": {
          "selected": 0
        },
        "meta": {
          "name": "Tabs Cont"
        },
        "position": {
          "basis": "30px",
          "shrink": 0
        },
        "props": {
          "style": {
            "marginLeft": "10px",
            "marginRight": "10px"
          }
        },
        "type": "ia.container.flex"
      },
      {
        "meta": {
          "name": "Events"
        },
        "position": {
          "basis": "520px",
          "grow": 1
        },
        "propConfig": {
          "position.display": {
            "binding": {
              "config": {
                "path": "this.props.instances"
              },
              "transforms": [
                {
                  "code": "\tif len(value) \u003d\u003d 0:\n\t\treturn False\n\telse:\n\t\treturn True",
                  "type": "script"
                }
              ],
              "type": "property"
            }
          },
          "props.instances": {
            "binding": {
              "config": {
                "struct": {
                  "eventType": "{../Tabs Cont.custom.selected}",
                  "refresh": "now({view.params.refresh})"
                },
                "waitOnAll": true
              },
              "transforms": [
                {
                  "code": "\t# Call getEvents to get the recent events.\n\tevents \u003d self.getEvents(value[\u0027eventType\u0027])\n\t\n\t# Iterate through events and create the instances for this flex repeater (using\n\t# the info in the events objects).\n\tinstances \u003d []\n\tfor event in events:\n\t\tisTop \u003d event[\u0027isTop\u0027]\n\t\teventTitle \u003d event[\u0027event\u0027]\n\t\tdatetime \u003d event[\u0027datetime\u0027]\n\t\tnote \u003d event[\u0027note\u0027]\n\t\tuser \u003d event[\u0027user\u0027]\n\t\ttype \u003d event[\u0027type\u0027]\n\t\tnoteID \u003d event[\u0027noteID\u0027]\n\t\t\n\t\tbasis \u003d \u0027auto\u0027\n\t\n\t\tinstance \u003d {\"instanceStyle\":{\"classes\":\"\"},\"instancePosition\":{\"grow\":0,\"basis\":basis,\"shrink\":0},\"isTop\":isTop,\"event\":eventTitle,\"datetime\":datetime,\"note\":note,\"user\":user,\"type\":type,\"noteID\":noteID,\"mobile\":self.view.params.mobile}\t\n\t\tinstances.append(instance)\n\t\n\t# Set the \u0027Updated\u0027 text to inform the user about the last time that the \n\t# activity log was updated. \n\tself.parent.getChild(\"Header\").getChild(\"Last Refresh\").props.text \u003d \u0027Updated: \u0027 + system.date.format(system.date.now(),\u0027ddMMMyyyy hh:mm:ss a\u0027)\n\t\t\n\treturn instances",
                  "type": "script"
                }
              ],
              "type": "expr-struct"
            }
          },
          "props.style.marginLeft": {
            "binding": {
              "config": {
                "expression": "if({view.params.mobile}\u003dfalse,\u002715px\u0027,\u00275px\u0027)"
              },
              "type": "expr"
            }
          }
        },
        "props": {
          "direction": "column",
          "path": "Building Automation Demo/Page/Systems Overview/Framework/Dashboard/Widgets/Activity Log/Row",
          "style": {
            "marginTop": "20px",
            "paddingRight": "10px"
          },
          "useDefaultViewHeight": false,
          "useDefaultViewWidth": false
        },
        "scripts": {
          "customMethods": [
            {
              "name": "getEvents",
              "params": [
                "eventType"
              ],
              "script": "\tdef getNotes():\n\t\t\"\"\"\n\t\tLoads the notes from the db and puts them in a format\n\t\t\texpected by the flex repeater.\n\t\t\t\t\n\t\tArgs:\n\t\t\tThis function does not contain any args.\n\t\t\t\t\n\t\tReturns:\n\t\t\tA list of dictionary objects that represent notes.\n\t\t\"\"\"\n\t\n\t\t# Create instances list.\n\t\tinstances \u003d []\n\t\t\n\t\t# Get the 10 most recent notes.\n\t\tnotes \u003d system.db.runNamedQuery(\u0027Activity Log/getNotes\u0027,parameters\u003d{\u0027limit\u0027:10})\n\t\t\n\t\t# Add each note to the instances list.\n\t\tfor i in range(notes.getRowCount()):\n\t\t\ttitle \u003d notes.getValueAt(i,\u0027title\u0027)\n\t\t\tnote \u003d notes.getValueAt(i,\u0027note\u0027)\n\t\t\tuser \u003d notes.getValueAt(i,\u0027user\u0027)\n\t\t\tdate \u003d notes.getValueAt(i,\u0027date\u0027)\n\t\t\tid \u003d notes.getValueAt(i,\u0027id\u0027)\n\t\t\t\n\t\t\tinstances.append({\u0027datetime\u0027:date,\u0027event\u0027:title,\u0027isTop\u0027:False,\u0027note\u0027:note,\u0027type\u0027:1,\u0027user\u0027:user,\u0027noteID\u0027:id})\n\t\t\n\t\treturn instances\n\t\t\n\tdef getSPRequests():\n\t\t\"\"\"\n\t\tLoads the sp requests from the db and puts them in a\n\t\t\tformat expected by the flex repeater.\n\t\t\t\t\n\t\tArgs:\n\t\t\tThis function does not contain any args.\n\t\t\t\t\n\t\tReturns:\n\t\t\tA list of dictionary objects that represent sp\n\t\t\trequests.\n\t\t\"\"\"\n\t\n\t\t# Create instances list.\n\t\tinstances \u003d []\n\t\t\n\t\t# Get the 10 most recent sp requests.\n\t\tspRequests \u003d system.db.runNamedQuery(\u0027Activity Log/getSPRequests\u0027,parameters\u003d{\u0027limit\u0027:10})\n\t\t\n\t\t# Add each sp request to the instances list.\n\t\tfor i in range(spRequests.getRowCount()):\n\t\t\tzone \u003d spRequests.getValueAt(i,\u0027zone\u0027)\n\t\t\topenedBy \u003d spRequests.getValueAt(i,\u0027opened_by\u0027)\n\t\t\topenedTime \u003d spRequests.getValueAt(i,\u0027opened_time\u0027)\n\t\t\tclosedBy \u003d spRequests.getValueAt(i,\u0027closed_by\u0027)\n\t\t\tclosedTime \u003d spRequests.getValueAt(i,\u0027closed_time\u0027)\n\t\t\tsetpoint \u003d spRequests.getValueAt(i,\u0027setpoint\u0027)\t\t\n\t\t\tnote \u003d \"Zone: \" + zone + \", SP: \" + str(setpoint)\n\t\t\t\n\t\t\tinstances.append({\u0027datetime\u0027:openedTime,\u0027event\u0027:\"SP Request Rec\u0027d\",\u0027isTop\u0027:False,\u0027note\u0027:note,\u0027type\u0027:2,\u0027user\u0027:openedBy,\u0027noteID\u0027:-1})\n\t\t\t\n\t\t\t# If closedBy is not equal to none, then that means that the SP request\n\t\t\t# was closed, and so we need to add another entry that signifies that\n\t\t\t# the request was closed.\n\t\t\tif closedBy !\u003d None:\n\t\t\t\tinstances.append({\u0027datetime\u0027:closedTime,\u0027event\u0027:\u0027SP Request Closed\u0027,\u0027isTop\u0027:False,\u0027note\u0027:note,\u0027type\u0027:2,\u0027user\u0027:closedBy,\u0027noteID\u0027:-1})\n\t\t\t\n\t\treturn instances\n\t\t\t\t\n\tdef getAlarmEvents():\n\t\t\"\"\"\n\t\tLoads the alarm events from the db and puts them in a\n\t\t\tformat expected by the flex repeater. Will query\n\t\t\tthe journal continously until it has found 5 events.\n\t\t\t\t\n\t\tArgs:\n\t\t\tThis function does not contain any args.\n\t\t\t\t\n\t\tReturns:\n\t\t\tA list of dictionary objects that represent alarm\n\t\t\tevents.\n\t\t\"\"\"\n\t\n\t\t# Create instances list.\n\t\tinstances \u003d []\n\t\t\n\t\t# Start off getting alarm events from the last 48 hours.\n\t\tendDate \u003d system.date.now()\n\t\tstartDate \u003d system.date.addHours(endDate,-48)\n\t\talarmEvents \u003d system.alarm.queryJournal(startDate\u003dstartDate,endDate\u003dendDate,journalName\u003d\u0027BMS\u0027)\n\t\t\n\t\t# Continously subtract hours from startDate and/or endDate\n\t\t# and query the alarm journal until at least 5 events have\n\t\t# been returned.\n\t\twhile len(alarmEvents) \u003c 5:\n\t\t\tif len(alarmEvents) \u003d\u003d 0:\n\t\t\t\tendDate \u003d system.date.addHours(endDate,-48)\n\t\t\tstartDate \u003d system.date.addHours(startDate,-48)\n\t\t\t\n\t\t\talarmEvents \u003d system.alarm.queryJournal(startDate\u003dstartDate,endDate\u003dendDate,journalName\u003d\u0027BMS\u0027)\n\t\t\n\t\t# Define map to display more user-friendly text that\n\t\t# denotes the type of alarm event.\t\n\t\teventMap \u003d {\u0027Ack\u0027: \u0027Alarm Acked\u0027, \u0027Clear\u0027: \u0027Alarm Cleared\u0027, \u0027Active\u0027: \u0027Alarm Active\u0027}\n\t\t\n\t\t# Add each alarm journal event to the instances list.\n\t\tfor alarmEvent in alarmEvents:\n\t\t\tevent \u003d eventMap[str(alarmEvent.getLastEventState())]\n\t\t\t\n\t\t\tif alarmEvent.ackData:\n\t\t\t\tfor item in alarmEvent.ackData:\n\t\t\t\t\tif str(item.getProperty()) \u003d\u003d \u0027eventTime\u0027:\n\t\t\t\t\t\tdatetime \u003d item.getValue()\n\t\t\t\t\tif str(item.getProperty()) \u003d\u003d \u0027ackUser\u0027:\n\t\t\t\t\t\tuser \u003d item.getValue()\n\t\t\t\t\t\t\n\t\t\tif alarmEvent.clearedData:\n\t\t\t\tfor item in alarmEvent.clearedData:\n\t\t\t\t\tif str(item.getProperty()) \u003d\u003d \u0027eventTime\u0027:\n\t\t\t\t\t\tdatetime \u003d item.getValue()\n\t\t\t\t\t\tif not (alarmEvent.ackData):\n\t\t\t\t\t\t\tuser \u003d \u0027System\u0027\n\t\t\t\t\t\tbreak\n\t\t\t\t\t\t\t\t\t\n\t\t\tif alarmEvent.activeData:\n\t\t\t\tfor item in alarmEvent.activeData:\n\t\t\t\t\tif str(item.getProperty()) \u003d\u003d \u0027eventTime\u0027:\n\t\t\t\t\t\tdatetime \u003d item.getValue()\n\t\t\t\t\t\tuser \u003d \u0027System\u0027\n\t\t\t\t\t\tbreak\n\t\t\t\n\t\t\tnote \u003d alarmEvent.getDisplayPathOrSource().replace(\u0027\"\u0027,\u0027\u0027)\n\t\t\t\t\t\t\n\t\t\tinstances.append({\u0027datetime\u0027:datetime,\u0027event\u0027:event,\u0027isTop\u0027:False,\u0027note\u0027:note,\u0027type\u0027:0,\u0027user\u0027:user,\u0027noteID\u0027:-1})\n\t\t\t\n\t\treturn instances\n\t\n\t# If eventType is 0, get notes, sp requests, and alarm events.\n\t# If eventType is 1, get alarm events; if 2, get sp requests;\n\t# else only get notes.\n\tif eventType \u003d\u003d 0:\n\t\tinstances \u003d getNotes()\n\t\tinstances.extend(getSPRequests())\n\t\tinstances.extend(getAlarmEvents())\n\telif eventType \u003d\u003d 1:\n\t\tinstances \u003d getAlarmEvents()\n\telif eventType \u003d\u003d 2:\n\t\tinstances \u003d getSPRequests()\n\telse:\n\t\tinstances \u003d getNotes()\n\t\t\n\t# Now, we can sort the instances by datetime, change the date format\n\t# of the instances, and then return the instances.\n\tsortedInstances \u003d sorted(instances, key\u003dlambda item: item[\u0027datetime\u0027], reverse\u003dTrue)\n\tsortedInstances[0][\u0027isTop\u0027] \u003d True\n\t\n\tfor instance in sortedInstances:\n\t\tinstance[\u0027datetime\u0027] \u003d system.date.format(instance[\u0027datetime\u0027],\u0027ddMMMyyyy hh:mm:ss a\u0027)\n\t\n\t# Only return 20 instances.\n\tif len(sortedInstances) \u003e 20:\n\t\treturn sortedInstances[0:20]\n\telse:\n\t\treturn sortedInstances"
            }
          ],
          "extensionFunctions": null,
          "messageHandlers": []
        },
        "type": "ia.display.flex-repeater"
      },
      {
        "meta": {
          "name": "No Events"
        },
        "position": {
          "basis": "520px"
        },
        "propConfig": {
          "position.display": {
            "binding": {
              "config": {
                "path": "../Events.props.instances"
              },
              "transforms": [
                {
                  "code": "\tif len(value) \u003d\u003d 0:\n\t\treturn True\n\telse:\n\t\treturn False",
                  "type": "script"
                }
              ],
              "type": "property"
            }
          }
        },
        "props": {
          "style": {
            "textAlign": "center"
          },
          "text": "No events found."
        },
        "type": "ia.display.label"
      },
      {
        "children": [
          {
            "events": {
              "dom": {
                "onClick": {
                  "config": {
                    "script": "\t# Open the activityLogEvents side panel, and as params include the refreshRate (so \n\t# side panel can utilize same refreshRate configured by the user) and a boolean \n\t# denoting if the user is on a mobile device.\n\t\n\tsystem.perspective.openDock(\u0027activityLogEvents\u0027,params\u003d{\u0027isMobile\u0027:self.view.params.mobile,\u0027refreshRate\u0027:self.view.params.refresh})"
                  },
                  "scope": "G",
                  "type": "script"
                }
              }
            },
            "meta": {
              "name": "View All"
            },
            "position": {
              "shrink": 0
            },
            "props": {
              "style": {
                "color": "--neutral-90",
                "cursor": "pointer",
                "fontSize": "13px",
                "textAlign": "center",
                "textDecoration": "underline"
              },
              "text": "View All Events"
            },
            "type": "ia.display.label"
          }
        ],
        "meta": {
          "name": "View All Cont"
        },
        "position": {
          "shrink": 0
        },
        "props": {
          "justify": "center",
          "style": {
            "marginTop": "15px"
          }
        },
        "type": "ia.container.flex"
      },
      {
        "events": {
          "component": {
            "onActionPerformed": {
              "config": {
                "script": "\t# If user is authenticated, then open addEditNote dock if user is on\n\t# mobile or addEditNote popup if user is not on mobile. If user is\n\t# not authenticated, then the user should see the tooltip describing\n\t# that notes cannot be added by non-authenticated users.\n\t\n\tif self.session.props.auth.authenticated:\n\t\tif self.view.params.mobile:\n\t\t\tsystem.perspective.openDock(\u0027addEditNote\u0027,params\u003d{\u0027id\u0027:-1})\n\t\telse:\n\t\t\tsystem.perspective.openPopup(\u0027add-edit-note\u0027,\u0027Building Automation Demo/Page/Systems Overview/Framework/Dashboard/Widgets/Activity Log/Add Edit Note\u0027, params \u003d {\u0027id\u0027:-1},modal\u003dTrue,showCloseIcon\u003dFalse,draggable\u003dFalse)\n\telse:\n\t\tif self.view.params.mobile:\n\t\t\tself.requestTooltip()"
              },
              "scope": "G",
              "type": "script"
            }
          }
        },
        "meta": {
          "name": "Add Note",
          "tooltip": {
            "delay": 250,
            "style": {
              "backgroundColor": "var(--neutral-30)",
              "color": "var(--neutral-100)"
            },
            "text": "Only logged-in users can add a note."
          }
        },
        "position": {
          "basis": "30px",
          "shrink": 0
        },
        "propConfig": {
          "meta.tooltip.enabled": {
            "binding": {
              "config": {
                "expression": "!{session.props.auth.authenticated}"
              },
              "type": "expr"
            }
          },
          "props.style.backgroundColor": {
            "binding": {
              "config": {
                "expression": "if({session.props.theme}\u003d\u0027hvac-dark\u0027 || {session.props.theme}\u003d\u0027hvac-dark-warm\u0027,\u0027--neutral-90\u0027,\u0027--neutral-60\u0027)"
              },
              "type": "expr"
            }
          },
          "props.style.cursor": {
            "binding": {
              "config": {
                "expression": "if({session.props.auth.authenticated},\u0027pointer\u0027,\u0027not-allowed\u0027)"
              },
              "type": "expr"
            }
          }
        },
        "props": {
          "style": {
            "marginBottom": "15px",
            "marginLeft": "15px",
            "marginRight": "15px",
            "marginTop": "20px"
          },
          "text": "Add Note"
        },
        "type": "ia.input.button"
      }
    ],
    "meta": {
      "name": "root",
      "tooltip": {
        "style": {
          "backgroundColor": "var(--neutral-10)",
          "color": "var(--neutral-100)"
        }
      }
    },
    "propConfig": {
      "meta.tooltip.enabled": {
        "binding": {
          "config": {
            "path": "view.params.beingEdited"
          },
          "type": "property"
        }
      },
      "meta.tooltip.text": {
        "binding": {
          "config": {
            "expression": "\u0027Widget ID: \u0027 + toStr({view.params.widgetID})"
          },
          "type": "expr"
        }
      },
      "props.style": {
        "binding": {
          "config": {
            "path": "session.props.theme"
          },
          "transforms": [
            {
              "code": "\tif value in [\u0027hvac-warm\u0027,\u0027hvac\u0027]:\n\t\treturn {\"classes\": \"\",\"overflow\": \"hidden\",\"backgroundColor\": \"var(--neutral-10)\"}\n\telse:\n\t\treturn {\"classes\": \"\",\"overflow\": \"hidden\",\"backgroundColor\": \"var(--neutral-50)\"}\n\t\t#return {\"classes\": \"\",\"overflow\": \"hidden\",\"backgroundImage\": \"linear-gradient(var(--neutral-50),var(--neutral-40))\"}",
              "type": "script"
            }
          ],
          "type": "property"
        }
      }
    },
    "props": {
      "direction": "column"
    },
    "scripts": {
      "customMethods": [],
      "extensionFunctions": null,
      "messageHandlers": [
        {
          "messageType": "refreshActivityLog",
          "pageScope": true,
          "script": "\t# When adding a note, editing a note, or removing a note, this handler\n\t# is called to refresh the items listed in the activity log.\n\t\n\tself.getChild(\"Events\").refreshBinding(\u0027props.instances\u0027)",
          "sessionScope": false,
          "viewScope": false
        }
      ]
    },
    "type": "ia.container.flex"
  }
}