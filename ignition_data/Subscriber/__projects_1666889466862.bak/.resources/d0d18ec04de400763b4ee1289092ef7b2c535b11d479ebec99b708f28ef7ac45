{
  "custom": {},
  "params": {},
  "props": {
    "defaultSize": {
      "width": 357
    }
  },
  "root": {
    "children": [
      {
        "children": [
          {
            "events": {
              "dom": {
                "onClick": {
                  "config": {
                    "script": "\t# Close this side menu.\n\t\n\tsystem.perspective.closeDock(\u0027sideMenu\u0027)"
                  },
                  "scope": "G",
                  "type": "script"
                },
                "onTouchEnd": {
                  "config": {
                    "script": "\tsystem.perspective.closeDock(\u0027sideMenu\u0027)"
                  },
                  "scope": "G",
                  "type": "script"
                }
              }
            },
            "meta": {
              "name": "Close"
            },
            "position": {
              "basis": "28px",
              "shrink": 0
            },
            "propConfig": {
              "props.fill": {
                "binding": {
                  "config": {
                    "expression": "if({session.props.theme}\u003d\u0027hvac\u0027 || {session.props.theme}\u003d\u0027hvac-warm\u0027,\u0027var(--neutral-10)\u0027,\u0027var(--neutral-100)\u0027)"
                  },
                  "type": "expr"
                }
              }
            },
            "props": {
              "elements": [
                {
                  "d": "M0 0h24v24H0V0z",
                  "fill": {
                    "paint": "none"
                  },
                  "name": "path",
                  "type": "path"
                },
                {
                  "d": "M18.3 5.71c-.39-.39-1.02-.39-1.41 0L12 10.59 7.11 5.7c-.39-.39-1.02-.39-1.41 0-.39.39-.39 1.02 0 1.41L10.59 12 5.7 16.89c-.39.39-.39 1.02 0 1.41.39.39 1.02.39 1.41 0L12 13.41l4.89 4.89c.39.39 1.02.39 1.41 0 .39-.39.39-1.02 0-1.41L13.41 12l4.89-4.89c.38-.38.38-1.02 0-1.4z",
                  "name": "path",
                  "type": "path"
                }
              ],
              "viewBox": "0 0 24 24"
            },
            "type": "ia.shapes.svg"
          }
        ],
        "meta": {
          "name": "Header"
        },
        "position": {
          "basis": "45px",
          "shrink": 0
        },
        "props": {
          "justify": "space-between",
          "style": {
            "paddingLeft": "5px"
          }
        },
        "type": "ia.container.flex"
      },
      {
        "children": [
          {
            "meta": {
              "name": "Built In"
            },
            "position": {
              "basis": "120px",
              "shrink": 0
            },
            "propConfig": {
              "position.display": {
                "binding": {
                  "config": {
                    "struct": {
                      "authenticated": "{session.props.auth.authenticated}",
                      "user": "{session.custom.user}"
                    },
                    "waitOnAll": true
                  },
                  "transforms": [
                    {
                      "code": "\t# If user is not authenticated, then display the built-in icon (should display the\n\t# built-in \u0027Person\u0027). If user is authenticated and user\u0027s \u0027usebuiltin\u0027 is equal to\n\t# true, then return true (to display built-in icon); otherwise if the user\u0027s\n\t# \u0027profileimage\u0027 is equal to None, then return true (to display built-in icon);\n\t# else if the user\u0027s \u0027profileimage\u0027 is not equal to None, then return false (do\n\t# not display built-in icon).\n\t\n\tif value[\u0027authenticated\u0027]:\n\t\tif value[\u0027user\u0027][\u0027usebuiltin\u0027] \u003d\u003d 1:\n\t\t\treturn True\n\t\telse:\n\t\t\tif value[\u0027user\u0027][\u0027profileimage\u0027] \u003d\u003d None:\n\t\t\t\treturn True\n\t\t\telse:\n\t\t\t\treturn False\n\telse:\n\t\treturn True",
                      "type": "script"
                    }
                  ],
                  "type": "expr-struct"
                }
              },
              "props.params.fill": {
                "binding": {
                  "config": {
                    "expression": "if({session.props.theme}\u003d\u0027hvac\u0027 || {session.props.theme}\u003d\u0027hvac-warm\u0027,\u0027var(--neutral-10)\u0027,\u0027#b5b5b5\u0027)"
                  },
                  "type": "expr"
                }
              },
              "props.params.name": {
                "binding": {
                  "config": {
                    "struct": {
                      "authenticated": "{session.props.auth.authenticated}",
                      "user": "{session.custom.user}"
                    },
                    "waitOnAll": true
                  },
                  "transforms": [
                    {
                      "code": "\t# If user is not authenticated, then display the built-in icon \u0027Person\u0027. If user\n\t# is authenticated and user\u0027s \u0027built-in\u0027 is currently None, then display the\n\t# built-in icon \u0027Person\u0027; otherwise, display one of the four possible built-in\n\t# icons (based on the user\u0027s \u0027built-in\u0027).\n\t\n\tif value[\u0027authenticated\u0027]:\n\t\tif value[\u0027user\u0027][\u0027builtin\u0027] \u003d\u003d None:\n\t\t\treturn \u0027Person\u0027\n\t\telse:\n\t\t\treturn value[\u0027user\u0027][\u0027builtin\u0027]\n\telse:\n\t\treturn \u0027Person\u0027",
                      "type": "script"
                    }
                  ],
                  "type": "expr-struct"
                }
              }
            },
            "props": {
              "params": {
                "selected": false,
                "showLabel": false
              },
              "path": "Building Automation Demo/Page/User Config/Framework/Built In Icon",
              "style": {
                "overflow": "visible"
              }
            },
            "type": "ia.display.view"
          },
          {
            "meta": {
              "name": "Image"
            },
            "position": {
              "basis": "120px"
            },
            "propConfig": {
              "position.display": {
                "binding": {
                  "config": {
                    "struct": {
                      "authenticated": "{session.props.auth.authenticated}",
                      "user": "{session.custom.user}"
                    },
                    "waitOnAll": true
                  },
                  "transforms": [
                    {
                      "code": "\t# If user is authenticated, do not display this Image component (the built-in icon\n\t# will be displayed). If user is authenticated and user\u0027s \u0027usebuiltin\u0027 is equal to\n\t# true, or if the user\u0027s \u0027profileimage\u0027 is None, then do not display this Image\n\t# component; otherwise display this Image component.\n\t\n\tif value[\u0027authenticated\u0027]:\n\t\tif value[\u0027user\u0027][\u0027usebuiltin\u0027] \u003d\u003d 1:\n\t\t\treturn False\n\t\telse:\n\t\t\tif value[\u0027user\u0027][\u0027profileimage\u0027] \u003d\u003d None:\n\t\t\t\treturn False\n\t\t\telse:\n\t\t\t\treturn True\n\telse:\n\t\treturn False",
                      "type": "script"
                    }
                  ],
                  "type": "expr-struct"
                }
              },
              "props.source": {
                "binding": {
                  "config": {
                    "struct": {
                      "authenticated": "{session.props.auth.authenticated}",
                      "user": "{session.custom.user}"
                    },
                    "waitOnAll": true
                  },
                  "transforms": [
                    {
                      "code": "\t# If user is not authenticated, return None. If user is authenticated,\n\t# then create a byte array from the \u0027profileimage\u0027 bytes, write the\n\t# bytes to a \u0027file\u0027, use imghdr.what to attempt to determine the image\n\t# file type, create the \u0027source\u0027 which contains the image bytes encoded\n\t# in base64, close the file, and then return the \u0027source\u0027 string.\n\t\n\tif value[\u0027authenticated\u0027]:\n\t\tfrom com.inductiveautomation.ignition.common import Base64\n\t\timport array\n\t\timport StringIO\n\t\timport imghdr\n\t\t\n\t\tdata \u003d array.array(\u0027b\u0027,value[\u0027user\u0027].profileimage)\n\t\tf \u003d StringIO.StringIO()\n\t\tf.write(data)\n\t\t\n\t\tfileType \u003d imghdr.what(f)\n\t\tsource \u003d \"data:image/{};base64,{}\".format(fileType,Base64.encodeBytes(data))\n\t\tf.close()\n\t\t\n\t\treturn source\n\telse:\n\t\treturn None\n\t",
                      "type": "script"
                    }
                  ],
                  "type": "expr-struct"
                }
              }
            },
            "props": {
              "fit": {
                "height": 120,
                "mode": "absolute",
                "width": 120
              },
              "style": {
                "clip-path": "circle(47%)",
                "overflow": "visible"
              }
            },
            "type": "ia.display.image"
          },
          {
            "meta": {
              "name": "Name"
            },
            "propConfig": {
              "props.style.color": {
                "binding": {
                  "config": {
                    "expression": "if({session.props.theme}\u003d\u0027hvac\u0027 ||  {session.props.theme}\u003d\u0027hvac-warm\u0027,\u0027#FFFFFF\u0027,\u0027--neutral-90\u0027)"
                  },
                  "type": "expr"
                }
              },
              "props.text": {
                "binding": {
                  "config": {
                    "path": "session.props.auth"
                  },
                  "transforms": [
                    {
                      "code": "\t# If user is not authenticated, return \u0027Demo User\u0027. If user is authenticated, then\n\t# check first name and last name to see if either are not equal to None; if both\n\t# are not equal to None, then display user\u0027s full name; if last name is None but\n\t# first name isn\u0027t, then display user\u0027s first name; otherwise display the user\u0027s\n\t# username.\n\t\n\tif value.authenticated:\n\t\tif value[\u0027user\u0027][\u0027firstName\u0027] !\u003d None:\n\t\t\tif value[\u0027user\u0027][\u0027lastName\u0027] !\u003d None:\n\t\t\t\treturn value[\u0027user\u0027][\u0027firstName\u0027] + \u0027 \u0027 + value[\u0027user\u0027][\u0027lastName\u0027]\n\t\t\telse:\n\t\t\t\treturn value[\u0027user\u0027][\u0027firstName\u0027]\n\t\telse:\n\t\t\treturn value[\u0027user\u0027][\u0027userName\u0027]\n\telse:\n\t\treturn \u0027Demo User\u0027",
                      "type": "script"
                    }
                  ],
                  "type": "property"
                }
              }
            },
            "props": {
              "style": {
                "fontSize": "30px",
                "pointer-events": "none",
                "textAlign": "center",
                "white-space": "nowrap"
              }
            },
            "type": "ia.display.label"
          },
          {
            "meta": {
              "name": "Title"
            },
            "position": {
              "basis": "18px"
            },
            "propConfig": {
              "props.style.color": {
                "binding": {
                  "config": {
                    "expression": "if({session.props.theme}\u003d\u0027hvac\u0027 ||  {session.props.theme}\u003d\u0027hvac-warm\u0027,\u0027#FFFFFF\u0027,\u0027--neutral-90\u0027)"
                  },
                  "type": "expr"
                }
              },
              "props.text": {
                "binding": {
                  "config": {
                    "expression": "{session.custom.user.title}"
                  },
                  "transforms": [
                    {
                      "code": "\tif value \u003d\u003d None:\n\t\treturn \u0027Guest\u0027\n\telse:\n\t\treturn value",
                      "type": "script"
                    }
                  ],
                  "type": "expr"
                }
              }
            },
            "props": {
              "style": {
                "fontSize": "18px",
                "pointer-events": "none",
                "textAlign": "center",
                "white-space": "nowrap"
              }
            },
            "type": "ia.display.label"
          }
        ],
        "meta": {
          "name": "Image And Name"
        },
        "position": {
          "basis": "75%",
          "grow": 1
        },
        "propConfig": {
          "props.alignItems": {
            "binding": {
              "config": {
                "expression": "if({./Built In.position.display}\u003dTrue,\u0027stretch\u0027,\u0027center\u0027)"
              },
              "type": "expr"
            }
          }
        },
        "props": {
          "direction": "column",
          "justify": "center"
        },
        "type": "ia.container.flex"
      },
      {
        "children": [
          {
            "meta": {
              "name": "Login"
            },
            "position": {
              "basis": "23px",
              "shrink": 0
            },
            "propConfig": {
              "position.display": {
                "binding": {
                  "config": {
                    "path": "session.props.auth.authenticated"
                  },
                  "transforms": [
                    {
                      "code": "\tif value:\n\t\treturn False\n\telse:\n\t\treturn True",
                      "type": "script"
                    }
                  ],
                  "type": "property"
                }
              }
            },
            "props": {
              "elements": [
                {
                  "elements": [
                    {
                      "fill": {
                        "paint": "none"
                      },
                      "height": "24",
                      "name": "rect",
                      "type": "rect",
                      "width": "24"
                    }
                  ],
                  "name": "group",
                  "type": "group"
                },
                {
                  "elements": [
                    {
                      "d": "M11,7L9.6,8.4l2.6,2.6H2v2h10.2l-2.6,2.6L11,17l5-5L11,7z M20,19h-8v2h8c1.1,0,2-0.9,2-2V5c0-1.1-0.9-2-2-2h-8v2h8V19z",
                      "name": "path",
                      "type": "path"
                    }
                  ],
                  "name": "group",
                  "type": "group"
                }
              ],
              "viewBox": "0 0 24 24"
            },
            "type": "ia.shapes.svg"
          },
          {
            "meta": {
              "name": "Logout"
            },
            "position": {
              "basis": "23px",
              "shrink": 0
            },
            "propConfig": {
              "position.display": {
                "binding": {
                  "config": {
                    "path": "session.props.auth.authenticated"
                  },
                  "transforms": [
                    {
                      "code": "\tif value:\n\t\treturn True\n\telse:\n\t\treturn False",
                      "type": "script"
                    }
                  ],
                  "type": "property"
                }
              }
            },
            "props": {
              "elements": [
                {
                  "d": "M0 0h24v24H0z",
                  "fill": {
                    "paint": "none"
                  },
                  "name": "path",
                  "type": "path"
                },
                {
                  "d": "M17 7l-1.41 1.41L18.17 11H8v2h10.17l-2.58 2.58L17 17l5-5zM4 5h8V3H4c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h8v-2H4V5z",
                  "name": "path",
                  "type": "path"
                }
              ],
              "viewBox": "0 0 24 24"
            },
            "type": "ia.shapes.svg"
          },
          {
            "meta": {
              "name": "Lbl"
            },
            "position": {
              "shrink": 0
            },
            "propConfig": {
              "props.text": {
                "binding": {
                  "config": {
                    "path": "session.props.auth.authenticated"
                  },
                  "transforms": [
                    {
                      "code": "\tif value:\n\t\treturn \u0027Log Out\u0027\n\telse:\n\t\treturn \u0027Log In\u0027",
                      "type": "script"
                    }
                  ],
                  "type": "property"
                }
              }
            },
            "props": {
              "style": {
                "paddingLeft": "5px"
              }
            },
            "type": "ia.display.label"
          }
        ],
        "events": {
          "dom": {
            "onClick": {
              "config": {
                "script": "\t# If the user has logged-in, then log the user out.\n\t# If user has not logged-in, then call login().\n\t\n\tif self.session.props.auth.authenticated:\n\t\tsystem.perspective.logout()\n\telse:\n\t\tsystem.perspective.login()"
              },
              "scope": "G",
              "type": "script"
            }
          }
        },
        "meta": {
          "name": "Logout Login Cont",
          "tooltip": {
            "text": "LOG OUT"
          }
        },
        "position": {
          "basis": "50px",
          "shrink": 0
        },
        "propConfig": {
          "props.style.borderColor": {
            "binding": {
              "config": {
                "expression": "if({session.props.theme}\u003d\u0027hvac\u0027 || {session.props.theme}\u003d\u0027hvac-warm\u0027,\u0027var(--neutral-10)\u0027,\u0027var(--neutral-50)\u0027)"
              },
              "type": "expr"
            }
          },
          "props.style.color": {
            "binding": {
              "config": {
                "expression": "if({session.props.theme}\u003d\u0027hvac\u0027 || {session.props.theme}\u003d\u0027hvac-warm\u0027,\u0027var(--neutral-10)\u0027,\u0027var(--neutral-90)\u0027)"
              },
              "type": "expr"
            }
          },
          "props.style.fill": {
            "binding": {
              "config": {
                "expression": "if({session.props.theme}\u003d\u0027hvac\u0027 || {session.props.theme}\u003d\u0027hvac-warm\u0027,\u0027var(--neutral-10)\u0027,\u0027var(--neutral-80)\u0027)"
              },
              "type": "expr"
            }
          }
        },
        "props": {
          "alignContent": "center",
          "alignItems": "center",
          "justify": "center",
          "style": {
            "backgroundColor": "#C0C0C000",
            "borderRadius": "8px",
            "borderStyle": "solid",
            "borderWidth": "1px",
            "marginBottom": "10px",
            "marginLeft": "15px",
            "marginRight": "15px",
            "marginTop": "15px",
            "overflow": "hidden"
          }
        },
        "type": "ia.container.flex"
      },
      {
        "children": [
          {
            "meta": {
              "name": "Gear"
            },
            "position": {
              "basis": "23px",
              "shrink": 0
            },
            "props": {
              "elements": [
                {
                  "elements": [
                    {
                      "d": "M0,0h24v24H0V0z",
                      "fill": {
                        "paint": "none"
                      },
                      "name": "path",
                      "type": "path"
                    },
                    {
                      "d": "M19.14,12.94c0.04-0.3,0.06-0.61,0.06-0.94c0-0.32-0.02-0.64-0.07-0.94l2.03-1.58c0.18-0.14,0.23-0.41,0.12-0.61 l-1.92-3.32c-0.12-0.22-0.37-0.29-0.59-0.22l-2.39,0.96c-0.5-0.38-1.03-0.7-1.62-0.94L14.4,2.81c-0.04-0.24-0.24-0.41-0.48-0.41 h-3.84c-0.24,0-0.43,0.17-0.47,0.41L9.25,5.35C8.66,5.59,8.12,5.92,7.63,6.29L5.24,5.33c-0.22-0.08-0.47,0-0.59,0.22L2.74,8.87 C2.62,9.08,2.66,9.34,2.86,9.48l2.03,1.58C4.84,11.36,4.8,11.69,4.8,12s0.02,0.64,0.07,0.94l-2.03,1.58 c-0.18,0.14-0.23,0.41-0.12,0.61l1.92,3.32c0.12,0.22,0.37,0.29,0.59,0.22l2.39-0.96c0.5,0.38,1.03,0.7,1.62,0.94l0.36,2.54 c0.05,0.24,0.24,0.41,0.48,0.41h3.84c0.24,0,0.44-0.17,0.47-0.41l0.36-2.54c0.59-0.24,1.13-0.56,1.62-0.94l2.39,0.96 c0.22,0.08,0.47,0,0.59-0.22l1.92-3.32c0.12-0.22,0.07-0.47-0.12-0.61L19.14,12.94z M12,15.6c-1.98,0-3.6-1.62-3.6-3.6 s1.62-3.6,3.6-3.6s3.6,1.62,3.6,3.6S13.98,15.6,12,15.6z",
                      "name": "path",
                      "type": "path"
                    }
                  ],
                  "name": "group",
                  "type": "group"
                }
              ],
              "viewBox": "0 0 24 24"
            },
            "type": "ia.shapes.svg"
          },
          {
            "meta": {
              "name": "Settings"
            },
            "position": {
              "shrink": 0
            },
            "propConfig": {
              "props.text": {
                "binding": {
                  "config": {
                    "path": "session.props.auth.authenticated"
                  },
                  "transforms": [
                    {
                      "code": "\tif value:\n\t\treturn \u0027Settings\u0027\n\telse:\n\t\treturn \u0027Change Theme\u0027",
                      "type": "script"
                    }
                  ],
                  "type": "property"
                }
              }
            },
            "props": {
              "style": {
                "paddingLeft": "5px"
              }
            },
            "type": "ia.display.label"
          }
        ],
        "events": {
          "dom": {
            "onClick": {
              "config": {
                "script": "\t# If the user has logged-in, then open the User Config panel so that the user can\n\t# modify the user settings. If user has not logged-in, then open the Change Theme\n\t# panel so that the guest user can try changing the theme.\n\t\n\tif self.session.props.auth.authenticated:\n\t\tsystem.perspective.openDock(\u0027userConfigPanel\u0027,params\u003d{\u0027currTheme\u0027:self.session.props.theme})\n\telse:\n\t\tsystem.perspective.closeDock(\u0027sideMenu\u0027)\n\t\tsystem.perspective.openDock(\u0027changeTheme\u0027,params\u003d{})"
              },
              "scope": "G",
              "type": "script"
            }
          }
        },
        "meta": {
          "name": "Preferences Cont",
          "tooltip": {
            "text": "SETTINGS"
          }
        },
        "position": {
          "basis": "50px",
          "shrink": 0
        },
        "propConfig": {
          "props.style.borderColor": {
            "binding": {
              "config": {
                "expression": "if({session.props.theme}\u003d\u0027hvac\u0027 || {session.props.theme}\u003d\u0027hvac-warm\u0027,\u0027var(--neutral-10)\u0027,\u0027var(--neutral-50)\u0027)"
              },
              "type": "expr"
            }
          },
          "props.style.color": {
            "binding": {
              "config": {
                "expression": "if({session.props.theme}\u003d\u0027hvac\u0027 || {session.props.theme}\u003d\u0027hvac-warm\u0027,\u0027var(--neutral-10)\u0027,\u0027var(--neutral-90)\u0027)"
              },
              "type": "expr"
            }
          },
          "props.style.fill": {
            "binding": {
              "config": {
                "expression": "if({session.props.theme}\u003d\u0027hvac\u0027 || {session.props.theme}\u003d\u0027hvac-warm\u0027,\u0027var(--neutral-10)\u0027,\u0027var(--neutral-80)\u0027)"
              },
              "type": "expr"
            }
          }
        },
        "props": {
          "alignContent": "center",
          "alignItems": "center",
          "justify": "center",
          "style": {
            "backgroundColor": "#C0C0C000",
            "borderRadius": "8px",
            "borderStyle": "solid",
            "borderWidth": "1px",
            "marginBottom": "10px",
            "marginLeft": "15px",
            "marginRight": "15px",
            "overflow": "hidden"
          }
        },
        "type": "ia.container.flex"
      },
      {
        "children": [
          {
            "meta": {
              "name": "Home"
            },
            "position": {
              "basis": "25px",
              "shrink": 0
            },
            "props": {
              "elements": [
                {
                  "d": "M0 0h24v24H0z",
                  "fill": {
                    "paint": "none"
                  },
                  "name": "path",
                  "type": "path"
                },
                {
                  "d": "M10 20v-6h4v6h5v-8h3L12 3 2 12h3v8z",
                  "name": "path",
                  "type": "path"
                }
              ],
              "viewBox": "0 0 24 24"
            },
            "type": "ia.shapes.svg"
          },
          {
            "meta": {
              "name": "Demo Label"
            },
            "position": {
              "shrink": 0
            },
            "props": {
              "style": {
                "paddingLeft": "5px"
              },
              "text": "Go To Online Demo"
            },
            "type": "ia.display.label"
          }
        ],
        "events": {
          "dom": {
            "onClick": {
              "config": {
                "script": "\tsystem.perspective.navigate(url \u003d self.session.props.gateway.address + \"/data/perspective/client/OnlineDemo/\")"
              },
              "scope": "G",
              "type": "script"
            }
          }
        },
        "meta": {
          "name": "Demo Cont",
          "tooltip": {
            "enabled": true,
            "text": "GO TO ONLINE DEMO"
          }
        },
        "position": {
          "basis": "50px",
          "shrink": 0
        },
        "propConfig": {
          "props.style.borderColor": {
            "binding": {
              "config": {
                "expression": "if({session.props.theme}\u003d\u0027hvac\u0027 || {session.props.theme}\u003d\u0027hvac-warm\u0027,\u0027var(--neutral-10)\u0027,\u0027var(--neutral-50)\u0027)"
              },
              "type": "expr"
            }
          },
          "props.style.color": {
            "binding": {
              "config": {
                "expression": "if({session.props.theme}\u003d\u0027hvac\u0027 || {session.props.theme}\u003d\u0027hvac-warm\u0027,\u0027var(--neutral-10)\u0027,\u0027var(--neutral-90)\u0027)"
              },
              "type": "expr"
            }
          },
          "props.style.fill": {
            "binding": {
              "config": {
                "expression": "if({session.props.theme}\u003d\u0027hvac\u0027 || {session.props.theme}\u003d\u0027hvac-warm\u0027,\u0027var(--neutral-10)\u0027,\u0027var(--neutral-80)\u0027)"
              },
              "type": "expr"
            }
          }
        },
        "props": {
          "justify": "center",
          "style": {
            "backgroundColor": "#C0C0C000",
            "borderRadius": "8px",
            "borderStyle": "solid",
            "borderWidth": "1px",
            "marginBottom": "10px",
            "marginLeft": "15px",
            "marginRight": "15px",
            "overflow": "hidden"
          }
        },
        "type": "ia.container.flex"
      }
    ],
    "meta": {
      "name": "root"
    },
    "propConfig": {
      "props.style.backgroundColor": {
        "binding": {
          "config": {
            "path": "session.props.theme"
          },
          "transforms": [
            {
              "code": "\tif value in [\u0027hvac-warm\u0027,\u0027hvac\u0027]:\n\t\treturn \u0027#878D96\u0027 if value\u003d\u003d\u0027hvac\u0027 else \u0027#8F8B8B\u0027\n\telse:\n\t\treturn \u0027var(--neutral-30)\u0027",
              "type": "script"
            }
          ],
          "type": "property"
        }
      }
    },
    "props": {
      "direction": "column"
    },
    "type": "ia.container.flex"
  }
}