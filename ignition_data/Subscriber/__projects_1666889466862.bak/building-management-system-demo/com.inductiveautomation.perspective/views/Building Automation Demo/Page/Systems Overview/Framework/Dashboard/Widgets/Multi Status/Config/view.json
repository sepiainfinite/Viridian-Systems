{
  "custom": {
    "configuring": false
  },
  "params": {
    "currentParams": {
      "tags": [],
      "widgetTitle": ""
    }
  },
  "propConfig": {
    "custom.configuring": {
      "persistent": true
    },
    "custom.name": {
      "persistent": true
    },
    "custom.optionsBackup": {
      "persistent": true
    },
    "custom.selectingColor": {
      "persistent": true
    },
    "params.currentParams": {
      "paramDirection": "inout",
      "persistent": true
    },
    "params.key": {
      "paramDirection": "input",
      "persistent": true
    }
  },
  "props": {
    "defaultSize": {
      "height": 842,
      "width": 753
    }
  },
  "root": {
    "children": [
      {
        "children": [
          {
            "children": [
              {
                "meta": {
                  "name": "Label Widget Title"
                },
                "props": {
                  "style": {
                    "color": "--neutral-100",
                    "fontSize": "16px",
                    "white-space": "nowrap"
                  },
                  "text": "Widget Title"
                },
                "type": "ia.display.label"
              },
              {
                "meta": {
                  "name": "Title"
                },
                "position": {
                  "basis": "35px"
                },
                "propConfig": {
                  "props.text": {
                    "binding": {
                      "config": {
                        "bidirectional": true,
                        "path": "view.params.currentParams.widgetTitle"
                      },
                      "type": "property"
                    }
                  }
                },
                "props": {
                  "style": {
                    "backgroundColor": "--neutral-10",
                    "borderBottomStyle": "solid",
                    "borderLeftStyle": "none",
                    "borderRightStyle": "none",
                    "borderTopStyle": "none",
                    "fontSize": "15px",
                    "outlineStyle": "none"
                  }
                },
                "type": "ia.input.text-field"
              }
            ],
            "meta": {
              "name": "Widget Title"
            },
            "position": {
              "basis": "45px"
            },
            "props": {
              "direction": "column"
            },
            "type": "ia.container.flex"
          },
          {
            "children": [
              {
                "meta": {
                  "name": "Title"
                },
                "propConfig": {
                  "props.text": {
                    "binding": {
                      "config": {
                        "path": "view.params.currentParams.tags"
                      },
                      "transforms": [
                        {
                          "code": "\treturn \u0027Tags: \u0027 + str(len(value)) ",
                          "type": "script"
                        }
                      ],
                      "type": "property"
                    }
                  }
                },
                "props": {
                  "style": {
                    "color": "--neutral-100",
                    "fontSize": "16px",
                    "white-space": "nowrap"
                  }
                },
                "type": "ia.display.label"
              },
              {
                "meta": {
                  "name": "Tags"
                },
                "propConfig": {
                  "props.instances": {
                    "binding": {
                      "config": {
                        "path": "view.params.currentParams.tags"
                      },
                      "transforms": [
                        {
                          "code": "\t# Utilize the tag info in the tags list to create the \u0027config row\u0027\n\t# instances (clicking on a row causes the \u0027configure tag\u0027 panel\n\t# to become populated with the tag info, and also causes the\n\t# \u0027configure tag\u0027 panel to become visible).\n\t\n\tinstances \u003d []\n\t\n\ti \u003d 0\n\t\n\tfor tag in value:\n\t\tac \u003d tag[\u0027ac\u0027]\n\t\tcompressor \u003d tag[\u0027compressor\u0027]\n\t\thighThreshold \u003d tag[\u0027highThreshold\u0027]\n\t\tlowThreshold \u003d tag[\u0027lowThreshold\u0027]\n\t\tmappings \u003d tag[\u0027mappings\u0027]\n\t\tname \u003d tag[\u0027name\u0027]\n\t\tnameOverride \u003d tag[\u0027nameOverride\u0027]\n\t\tnumberFormat \u003d tag[\u0027numberFormat\u0027]\n\t\tpath \u003d tag[\u0027path\u0027]\n\t\ttype \u003d tag[\u0027type\u0027]\n\t\tunits \u003d tag[\u0027units\u0027]\n\t\teditable \u003d tag[\u0027editable\u0027]\n\t\t\n\t\tinstance \u003d ({\"instanceStyle\": {\"classes\": \"\"},\"instancePosition\": {},\"ac\": ac,\"compressor\": compressor,\"highThreshold\": highThreshold,\n\t\t\"lowThreshold\": lowThreshold,\"mappings\": mappings,\"name\": name,\"nameOverride\": nameOverride,\"numberFormat\": numberFormat,\"path\": path,\n\t\t\"type\": type,\"units\": units,\"index\":i,\"editable\":editable})\n\t\t\n\t\tinstances.append(instance)\n\t\t\n\t\ti \u003d i + 1\n\t\t\n\treturn instances",
                          "type": "script"
                        }
                      ],
                      "type": "property"
                    }
                  }
                },
                "props": {
                  "direction": "column",
                  "elementPosition": {
                    "grow": 0
                  },
                  "elementStyle": {
                    "classes": "building-automation-demo/page/systems-overview/framework/dashboard/widgets/multi-status/general-hover"
                  },
                  "path": "Building Automation Demo/Page/Systems Overview/Framework/Dashboard/Widgets/Multi Status/Config Row",
                  "useDefaultViewWidth": false
                },
                "type": "ia.display.flex-repeater"
              },
              {
                "events": {
                  "component": {
                    "onActionPerformed": {
                      "config": {
                        "script": "\t# Set the tagIndex param of the \u0027config tag\u0027 panel to -1 (so that the view\n\t# knows that a new tag is being added).\n\tself.parent.parent.parent.getChild(\"Config\").getChild(\"Config View\").props.params.tagIndex \u003d -1\n\t\n\t# Send message to \u0027toggleOptions\u0027 message handler to hide the \n\t# \u0027Apply\u0027 and \u0027Close\u0027 buttons for the edit widget panel.\n\tsystem.perspective.sendMessage(\u0027toggleOptions\u0027,payload\u003d{},scope\u003d\u0027page\u0027)\n\t\n\t# Set \u0027configuring\u0027 to true, which causes the \u0027config tag\u0027 panel to\n\t# become visible.\n\tself.view.custom.configuring \u003d True"
                      },
                      "scope": "G",
                      "type": "script"
                    }
                  }
                },
                "meta": {
                  "name": "Add Tag"
                },
                "position": {
                  "basis": "34px"
                },
                "props": {
                  "style": {
                    "classes": "building-automation-demo/page/systems-overview/framework/dashboard/widgets/button",
                    "marginLeft": "30px",
                    "marginRight": "30px",
                    "marginTop": "30px",
                    "transition": "background-color 0.25s linear"
                  },
                  "text": "Add Tag"
                },
                "type": "ia.input.button"
              }
            ],
            "meta": {
              "name": "Tags Cont"
            },
            "props": {
              "direction": "column",
              "style": {
                "marginTop": "40px"
              }
            },
            "type": "ia.container.flex"
          }
        ],
        "meta": {
          "name": "Main"
        },
        "position": {
          "basis": "200px",
          "grow": 1
        },
        "propConfig": {
          "position.display": {
            "binding": {
              "config": {
                "expression": "!{view.custom.configuring}"
              },
              "type": "expr"
            }
          }
        },
        "props": {
          "direction": "column"
        },
        "type": "ia.container.flex"
      },
      {
        "children": [
          {
            "meta": {
              "name": "Config View"
            },
            "position": {
              "basis": "320px",
              "grow": 1
            },
            "props": {
              "params": {
                "currentParams": {
                  "ac": -1,
                  "columnSpan": 1,
                  "compressor": -1,
                  "editable": false,
                  "highThreshold": "",
                  "index": -1,
                  "lowThreshold": "",
                  "mappings": [],
                  "name": "",
                  "nameOverride": "",
                  "numberFormat": "",
                  "path": "",
                  "rowSpan": 1,
                  "type": "",
                  "units": "",
                  "widgetTitle": ""
                }
              },
              "path": "Building Automation Demo/Page/Systems Overview/Framework/Dashboard/Widgets/Multi Status/Config View"
            },
            "type": "ia.display.view"
          }
        ],
        "meta": {
          "name": "Config"
        },
        "position": {
          "grow": 1
        },
        "propConfig": {
          "position.display": {
            "binding": {
              "config": {
                "path": "view.custom.configuring"
              },
              "type": "property"
            }
          }
        },
        "props": {
          "direction": "column"
        },
        "type": "ia.container.flex"
      }
    ],
    "meta": {
      "name": "root"
    },
    "props": {
      "alignContent": "flex-start",
      "direction": "column",
      "style": {
        "backgroundColor": "--neutral-10",
        "padding": "15px"
      }
    },
    "scripts": {
      "customMethods": [],
      "extensionFunctions": null,
      "messageHandlers": [
        {
          "messageType": "cancel",
          "pageScope": true,
          "script": "\t# User pressed cancel button, so send message to \u0027toggleOptions\u0027 message\n\t# handler (to re-show the \u0027Apply\u0027 and \u0027Close\u0027 buttons for the edit widget\n\t# panel) and close config panel by setting \u0027configuring\u0027 custom property \n\t# to false.\n\t\n\tsystem.perspective.sendMessage(\u0027toggleOptions\u0027,payload\u003d{},scope\u003d\u0027page\u0027)\n\t\n\tself.view.custom.configuring \u003d False",
          "sessionScope": false,
          "viewScope": false
        },
        {
          "messageType": "save",
          "pageScope": true,
          "script": "\t# User pressed save button after configuring tag; get the tag params\n\t# and delete the index (index only needed to know if creating new tag\n\t# or editing existing tag, it is not needed in the tag config that gets \n\t# saved to the db).\n\ttag \u003d dict(payload[\u0027currentParams\u0027])\n\tdel tag[\u0027index\u0027]\n\t\n\t# Utilize index to see if new tag or edit existing tag.\n\tindex \u003d payload[\u0027currentParams\u0027][\u0027index\u0027]\n\t\n\tif index \u003d\u003d -1:\n\t\t# Add tag config to tag list.\n\t\tself.view.params.currentParams.tags.append(tag)\n\telse:\t\n\t\t# Edit existing tag in tag list.\n\t\tself.view.params.currentParams.tags[index] \u003d tag\n\t\n\t# Clear out previous params in configView.\n\tself.getChild(\"Config\").getChild(\"Config View\").props.params \u003d {\n\t  \"currentParams\": {\n\t      \"ac\": -1,\n\t      \"compressor\": -1,\n\t      \"highThreshold\": \"\",\n\t      \"lowThreshold\": \"\",\n\t      \"mappings\": [],\n\t      \"name\": \"\",\n\t      \"nameOverride\": \"\",\n\t      \"numberFormat\": \"\",\n\t      \"path\": \"\",\n\t      \"units\": \"\",\n\t      \"index\": -1,\n\t      \"type\":\"\",\n\t      \"editable\":False\n\t     }\n\t }\n\t\n\t# Send message to \u0027toggleOptions\u0027 message handler to re-show the \u0027Apply\u0027 and\n\t# \u0027Close\u0027 buttons for the edit widget panel.\n\tsystem.perspective.sendMessage(\u0027toggleOptions\u0027,payload\u003d{},scope\u003d\u0027page\u0027)\n\t\n\t# Set configuring to False to hide the \u0027configure tag\u0027 panel.\n\tself.view.custom.configuring \u003d False",
          "sessionScope": false,
          "viewScope": false
        },
        {
          "messageType": "edit",
          "pageScope": true,
          "script": "\t# User is editing the tag. Get the info about the tag from payload.\n\tparams \u003d payload[\u0027params\u0027]\n\t\n\t# Set the params of the config view.\n\tself.getChild(\"Config\").getChild(\"Config View\").props.params.currentParams \u003d params\n\t\n\t# Send message to \u0027toggleOptions\u0027 message handler to hide the \n\t# \u0027Apply\u0027 and \u0027Close\u0027 buttons for the edit widget panel.\n\tsystem.perspective.sendMessage(\u0027toggleOptions\u0027,payload\u003d{},scope\u003d\u0027page\u0027)\n\t\n\t# Display the \u0027configure tag\u0027 panel by setting \u0027configuring\u0027\n\t# custom property to true.\n\tself.view.custom.configuring \u003d True",
          "sessionScope": false,
          "viewScope": false
        },
        {
          "messageType": "delete",
          "pageScope": true,
          "script": "\t# User has deleted the tag. Get the index of the tag\n\t# from the payload.\n\tindex \u003d payload[\u0027index\u0027]\n\t\n\t# Delete the tab object from the tags list.\n\tdel self.view.params.currentParams.tags[index]\n\t\n\t# Send message to \u0027toggleOptions\u0027 message handler to \n\t# re-show the \u0027Apply\u0027 and \u0027Close\u0027 buttons for the edit \n\t# widget panel.\n\tsystem.perspective.sendMessage(\u0027toggleOptions\u0027,payload\u003d{},scope\u003d\u0027page\u0027)\n\t\t\n\t# Hide the \u0027configure tag\u0027 panel by setting \u0027configuring\u0027\n\t# custom property to false.\n\tself.view.custom.configuring \u003d False",
          "sessionScope": false,
          "viewScope": false
        }
      ]
    },
    "type": "ia.container.flex"
  }
}