{
  "custom": {},
  "params": {
    "currTheme": "hvac-dark"
  },
  "propConfig": {
    "custom.material": {
      "persistent": true
    },
    "params.currTheme": {
      "paramDirection": "input",
      "persistent": true
    },
    "params.currTheme.key": {
      "paramDirection": "input",
      "persistent": true
    },
    "params.currTheme.key[0]": {
      "paramDirection": "input",
      "persistent": true
    },
    "params.materials[0]": {
      "paramDirection": "input",
      "persistent": true
    },
    "params.materials[1]": {
      "paramDirection": "input",
      "persistent": true
    }
  },
  "props": {
    "defaultSize": {
      "height": 490,
      "width": 458
    }
  },
  "root": {
    "children": [
      {
        "children": [
          {
            "children": [
              {
                "meta": {
                  "name": "Error"
                },
                "position": {
                  "basis": "23px"
                },
                "propConfig": {
                  "position.display": {
                    "binding": {
                      "config": {
                        "expression": "{../Label.props.text}\u003d\u0027Settings not saved\u0027"
                      },
                      "type": "expr"
                    }
                  }
                },
                "props": {
                  "elements": [
                    {
                      "d": "M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 11c-.55 0-1-.45-1-1V8c0-.55.45-1 1-1s1 .45 1 1v4c0 .55-.45 1-1 1zm1 4h-2v-2h2v2z",
                      "name": "path",
                      "type": "path"
                    }
                  ],
                  "fill": "#FFFFFF",
                  "style": {
                    "marginRight": "5px"
                  },
                  "viewBox": "0 0 24 24"
                },
                "type": "ia.shapes.svg"
              },
              {
                "meta": {
                  "name": "Success"
                },
                "position": {
                  "basis": "23px"
                },
                "propConfig": {
                  "position.display": {
                    "binding": {
                      "config": {
                        "expression": "{../Label.props.text}\u003d\u0027Settings saved!\u0027"
                      },
                      "type": "expr"
                    }
                  }
                },
                "props": {
                  "elements": [
                    {
                      "d": "M0 0h24v24H0V0z",
                      "fill": {
                        "paint": "none"
                      },
                      "name": "path",
                      "type": "path"
                    },
                    {
                      "d": "M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zM9.29 16.29L5.7 12.7c-.39-.39-.39-1.02 0-1.41.39-.39 1.02-.39 1.41 0L10 14.17l6.88-6.88c.39-.39 1.02-.39 1.41 0 .39.39.39 1.02 0 1.41l-7.59 7.59c-.38.39-1.02.39-1.41 0z",
                      "name": "path",
                      "type": "path"
                    }
                  ],
                  "fill": "#FFFFFF",
                  "style": {
                    "marginRight": "5px"
                  },
                  "viewBox": "0 0 24 24"
                },
                "type": "ia.shapes.svg"
              },
              {
                "meta": {
                  "name": "Label"
                },
                "position": {
                  "shrink": 0
                },
                "props": {
                  "style": {
                    "color": "#FFFFFF",
                    "fontSize": "13px",
                    "fontWeight": "bold",
                    "textAlign": "center"
                  },
                  "text": "Settings saved!"
                },
                "type": "ia.display.label"
              }
            ],
            "meta": {
              "name": "Results",
              "tooltip": {
                "style": {
                  "color": "#870000"
                }
              }
            },
            "position": {
              "basis": "40px",
              "shrink": 0
            },
            "propConfig": {
              "props.style.backgroundImage": {
                "binding": {
                  "config": {
                    "path": "./Label.props.text"
                  },
                  "transforms": [
                    {
                      "code": "\tif value \u003d\u003d \u0027Settings saved!\u0027:\n\t\treturn \u0027linear-gradient(#04CE04,#00A700)\u0027\n\telif value \u003d\u003d \u0027Please select a built-in icon or upload an image.\u0027:\n\t\treturn \u0027linear-gradient(#f5bc42,#e09200)\u0027\n\telse:\n\t\treturn \u0027linear-gradient(#D60000,#870000)\u0027",
                      "type": "script"
                    }
                  ],
                  "type": "property"
                }
              }
            },
            "props": {
              "justify": "center",
              "style": {
                "borderRadius": "10px",
                "paddingRight": "2%",
                "transform": "rotateX(90deg)",
                "transform-origin": "top center",
                "transform-style": "preserve-3d",
                "transition": "transform 0.4s ease"
              }
            },
            "type": "ia.container.flex"
          }
        ],
        "meta": {
          "name": "Results Cont"
        },
        "position": {
          "basis": "0px"
        },
        "props": {
          "direction": "column",
          "style": {
            "overflow": "visible",
            "perspective": "600px",
            "zIndex": 1
          }
        },
        "type": "ia.container.flex"
      },
      {
        "children": [
          {
            "children": [
              {
                "meta": {
                  "name": "Dashboard lbl"
                },
                "position": {
                  "shrink": 0
                },
                "props": {
                  "style": {
                    "color": "--neutral-100",
                    "fontSize": "15px",
                    "white-space": "nowrap"
                  },
                  "text": "Default Dashboard"
                },
                "type": "ia.display.label"
              },
              {
                "children": [
                  {
                    "children": [
                      {
                        "meta": {
                          "name": "Curr Dash"
                        },
                        "position": {
                          "grow": 1,
                          "shrink": 0
                        },
                        "propConfig": {
                          "props.text": {
                            "binding": {
                              "config": {
                                "path": "/root.custom.userConfig.defaultDash"
                              },
                              "transforms": [
                                {
                                  "code": "\t# Find the dashboard that corresponds with the default dash ID,\n\t# and return the name of this dashboard.\n\t\n\tdashboards \u003d self.session.custom.dashboard.dashboards.dashboards\n\t\n\tfor dashboard in dashboards:\n\t\tif dashboard.id \u003d\u003d value:\n\t\t\treturn dashboard.name\n\t\n\treturn \u0027Error\u0027",
                                  "type": "script"
                                }
                              ],
                              "type": "property"
                            }
                          }
                        },
                        "props": {
                          "style": {
                            "fontSize": "13px",
                            "fontWeight": "normal",
                            "transition": "font-color 0.25s linear"
                          }
                        },
                        "type": "ia.display.label"
                      },
                      {
                        "meta": {
                          "name": "Expand"
                        },
                        "position": {
                          "basis": "23px",
                          "shrink": 0
                        },
                        "propConfig": {
                          "position.display": {
                            "binding": {
                              "config": {
                                "expression": "{parent.custom.expanded}\u003dfalse"
                              },
                              "type": "expr"
                            }
                          }
                        },
                        "props": {
                          "elements": [
                            {
                              "d": "M0 0h24v24H0z",
                              "fill": {
                                "paint": "none"
                              },
                              "name": "path",
                              "type": "path"
                            },
                            {
                              "d": "M16.59 8.59L12 13.17 7.41 8.59 6 10l6 6 6-6z",
                              "name": "path",
                              "type": "path"
                            }
                          ],
                          "style": {
                            "transition": "fill 0.25s linear"
                          },
                          "viewBox": "0 0 24 24"
                        },
                        "type": "ia.shapes.svg"
                      },
                      {
                        "meta": {
                          "name": "Collapse"
                        },
                        "position": {
                          "basis": "23px",
                          "shrink": 0
                        },
                        "propConfig": {
                          "position.display": {
                            "binding": {
                              "config": {
                                "expression": "{parent.custom.expanded}\u003dtrue"
                              },
                              "type": "expr"
                            }
                          }
                        },
                        "props": {
                          "elements": [
                            {
                              "d": "M0 0h24v24H0z",
                              "fill": {
                                "paint": "none"
                              },
                              "name": "path",
                              "type": "path"
                            },
                            {
                              "d": "M12 8l-6 6 1.41 1.41L12 10.83l4.59 4.58L18 14z",
                              "name": "path",
                              "type": "path"
                            }
                          ],
                          "style": {
                            "transition": "fill 0.25s linear"
                          },
                          "viewBox": "0 0 24 24"
                        },
                        "type": "ia.shapes.svg"
                      }
                    ],
                    "custom": {
                      "expanded": false
                    },
                    "events": {
                      "dom": {
                        "onClick": {
                          "config": {
                            "script": "\tself.custom.expanded \u003d not self.custom.expanded"
                          },
                          "scope": "G",
                          "type": "script"
                        }
                      }
                    },
                    "meta": {
                      "name": "Select Dashboard"
                    },
                    "position": {
                      "basis": "32px",
                      "shrink": 0
                    },
                    "props": {
                      "style": {
                        "classes": "building-automation-demo/page/general-button",
                        "minHeight": "32px",
                        "paddingBottom": "3px",
                        "paddingLeft": "10px",
                        "paddingRight": "4px",
                        "paddingTop": "3px",
                        "transition": "border-color 0.25s linear"
                      }
                    },
                    "type": "ia.container.flex"
                  },
                  {
                    "meta": {
                      "name": "Select Dashboard View"
                    },
                    "position": {
                      "basis": "265px",
                      "shrink": 0
                    },
                    "propConfig": {
                      "position.display": {
                        "binding": {
                          "config": {
                            "path": "../Select Dashboard.custom.expanded"
                          },
                          "type": "property"
                        }
                      },
                      "props.params.defaultID": {
                        "binding": {
                          "config": {
                            "path": "/root.custom.userConfig.defaultDash"
                          },
                          "type": "property"
                        }
                      }
                    },
                    "props": {
                      "params": {
                        "inSettings": true
                      },
                      "path": "Building Automation Demo/Page/Systems Overview/Framework/Dashboard/Select Dashboard/Select Dashboard",
                      "style": {
                        "borderColor": "var(--neutral-70)",
                        "borderStyle": "solid",
                        "borderWidth": 1,
                        "minHeight": "265px",
                        "zIndex": 1
                      }
                    },
                    "type": "ia.display.view"
                  }
                ],
                "meta": {
                  "name": "Select Dash Column Cont"
                },
                "position": {
                  "basis": "225px",
                  "shrink": 0
                },
                "props": {
                  "direction": "column",
                  "style": {
                    "marginTop": "10px",
                    "overflow": "visible"
                  }
                },
                "type": "ia.container.flex"
              }
            ],
            "meta": {
              "name": "Dashboard Cont"
            },
            "position": {
              "basis": "65px",
              "shrink": 0
            },
            "props": {
              "direction": "column",
              "style": {
                "overflow": "visible"
              }
            },
            "type": "ia.container.flex"
          },
          {
            "children": [
              {
                "meta": {
                  "name": "Theme lbl"
                },
                "position": {
                  "shrink": 0
                },
                "props": {
                  "style": {
                    "color": "--neutral-100",
                    "fontSize": "15px",
                    "white-space": "nowrap"
                  },
                  "text": "Default Theme"
                },
                "type": "ia.display.label"
              },
              {
                "children": [
                  {
                    "children": [
                      {
                        "children": [
                          {
                            "meta": {
                              "name": "Light Ico"
                            },
                            "position": {
                              "basis": "20px",
                              "shrink": 0
                            },
                            "propConfig": {
                              "props.fill": {
                                "binding": {
                                  "config": {
                                    "expression": "if({session.props.theme}\u003d\u0027hvac\u0027 || {session.props.theme}\u003d\u0027hvac-warm\u0027,\u0027var(--neutral-30)\u0027,\u0027var(--neutral-90)\u0027)"
                                  },
                                  "type": "expr"
                                }
                              }
                            },
                            "props": {
                              "elements": [
                                {
                                  "fill": {
                                    "paint": "none"
                                  },
                                  "height": "24",
                                  "name": "rect",
                                  "type": "rect",
                                  "width": "24"
                                },
                                {
                                  "d": "M12,7c-2.76,0-5,2.24-5,5s2.24,5,5,5s5-2.24,5-5S14.76,7,12,7L12,7z M2,13l2,0c0.55,0,1-0.45,1-1s-0.45-1-1-1l-2,0 c-0.55,0-1,0.45-1,1S1.45,13,2,13z M20,13l2,0c0.55,0,1-0.45,1-1s-0.45-1-1-1l-2,0c-0.55,0-1,0.45-1,1S19.45,13,20,13z M11,2v2 c0,0.55,0.45,1,1,1s1-0.45,1-1V2c0-0.55-0.45-1-1-1S11,1.45,11,2z M11,20v2c0,0.55,0.45,1,1,1s1-0.45,1-1v-2c0-0.55-0.45-1-1-1 C11.45,19,11,19.45,11,20z M5.99,4.58c-0.39-0.39-1.03-0.39-1.41,0c-0.39,0.39-0.39,1.03,0,1.41l1.06,1.06 c0.39,0.39,1.03,0.39,1.41,0s0.39-1.03,0-1.41L5.99,4.58z M18.36,16.95c-0.39-0.39-1.03-0.39-1.41,0c-0.39,0.39-0.39,1.03,0,1.41 l1.06,1.06c0.39,0.39,1.03,0.39,1.41,0c0.39-0.39,0.39-1.03,0-1.41L18.36,16.95z M19.42,5.99c0.39-0.39,0.39-1.03,0-1.41 c-0.39-0.39-1.03-0.39-1.41,0l-1.06,1.06c-0.39,0.39-0.39,1.03,0,1.41s1.03,0.39,1.41,0L19.42,5.99z M7.05,18.36 c0.39-0.39,0.39-1.03,0-1.41c-0.39-0.39-1.03-0.39-1.41,0l-1.06,1.06c-0.39,0.39-0.39,1.03,0,1.41s1.03,0.39,1.41,0L7.05,18.36z",
                                  "name": "path",
                                  "type": "path"
                                }
                              ],
                              "viewBox": "0 0 24 24"
                            },
                            "type": "ia.shapes.svg"
                          },
                          {
                            "meta": {
                              "name": "Light"
                            },
                            "position": {
                              "shrink": 0
                            },
                            "props": {
                              "style": {
                                "fontSize": "13px",
                                "paddingLeft": "2px",
                                "white-space": "nowrap"
                              },
                              "text": "Light"
                            },
                            "type": "ia.display.label"
                          }
                        ],
                        "events": {
                          "dom": {
                            "onClick": {
                              "config": {
                                "script": "\t# If the current theme is not already light, then set theme to either\n\t# \u0027hvac\u0027 (if \u0027Cool\u0027 is currently being used) or \u0027hvac-warm\u0027 (if \u0027Warm\u0027\n\t# is currently being used).\n\t\n\tcurrTheme \u003d self.session.props.theme\n\t\n\tif currTheme not in [\u0027hvac\u0027,\u0027hvac-warm\u0027]:\n\t\tif currTheme \u003d\u003d \u0027hvac-dark\u0027:\n\t\t\tself.session.props.theme \u003d \u0027hvac\u0027\n\t\telif currTheme \u003d\u003d \u0027hvac-dark-warm\u0027:\n\t\t\tself.session.props.theme \u003d \u0027hvac-warm\u0027"
                              },
                              "scope": "G",
                              "type": "script"
                            }
                          }
                        },
                        "meta": {
                          "name": "Light Cont"
                        },
                        "position": {
                          "basis": "50%",
                          "grow": 1
                        },
                        "propConfig": {
                          "props.style.backgroundColor": {
                            "binding": {
                              "config": {
                                "expression": "if({session.props.theme}\u003d\u0027hvac\u0027 || {session.props.theme}\u003d\u0027hvac-warm\u0027,\u0027--neutral-100\u0027,\u0027--neutral-30\u0027)"
                              },
                              "type": "expr"
                            }
                          },
                          "props.style.color": {
                            "binding": {
                              "config": {
                                "expression": "if({session.props.theme}\u003d\u0027hvac\u0027 || {session.props.theme}\u003d\u0027hvac-warm\u0027,\u0027--neutral-30\u0027,\u0027--neutral-90\u0027)"
                              },
                              "type": "expr"
                            }
                          },
                          "props.style.cursor": {
                            "binding": {
                              "config": {
                                "expression": "if({session.props.theme}\u003d\u0027hvac\u0027 || {session.props.theme}\u003d\u0027hvac-warm\u0027,\u0027auto\u0027,\u0027pointer\u0027)"
                              },
                              "type": "expr"
                            }
                          }
                        },
                        "props": {
                          "justify": "center",
                          "style": {
                            "borderRightColor": "--neutral-80",
                            "borderRightStyle": "solid",
                            "borderRightWidth": 1,
                            "fontSize": "12px",
                            "textAlign": "center"
                          }
                        },
                        "type": "ia.container.flex"
                      },
                      {
                        "children": [
                          {
                            "meta": {
                              "name": "Dark Ico"
                            },
                            "position": {
                              "basis": "20px",
                              "shrink": 0
                            },
                            "propConfig": {
                              "props.fill": {
                                "binding": {
                                  "config": {
                                    "expression": "if({session.props.theme}\u003d\u0027hvac-dark\u0027 || {session.props.theme}\u003d\u0027hvac-dark-warm\u0027,\u0027var(--neutral-30)\u0027,\u0027var(--neutral-90)\u0027)"
                                  },
                                  "type": "expr"
                                }
                              }
                            },
                            "props": {
                              "elements": [
                                {
                                  "fill": {
                                    "paint": "none"
                                  },
                                  "height": "24",
                                  "name": "rect",
                                  "type": "rect",
                                  "width": "24"
                                },
                                {
                                  "d": "M12,3c-4.97,0-9,4.03-9,9s4.03,9,9,9s9-4.03,9-9c0-0.46-0.04-0.92-0.1-1.36c-0.98,1.37-2.58,2.26-4.4,2.26 c-2.98,0-5.4-2.42-5.4-5.4c0-1.81,0.89-3.42,2.26-4.4C12.92,3.04,12.46,3,12,3L12,3z",
                                  "name": "path",
                                  "type": "path"
                                }
                              ],
                              "viewBox": "0 0 24 24"
                            },
                            "type": "ia.shapes.svg"
                          },
                          {
                            "meta": {
                              "name": "Dark"
                            },
                            "position": {
                              "shrink": 0
                            },
                            "props": {
                              "style": {
                                "fontSize": "13px",
                                "paddingLeft": "2px",
                                "white-space": "nowrap"
                              },
                              "text": "Dark"
                            },
                            "type": "ia.display.label"
                          }
                        ],
                        "events": {
                          "dom": {
                            "onClick": {
                              "config": {
                                "script": "\t# If the current theme is not already dark, then set theme to either\n\t# \u0027hvac-dark\u0027 (if \u0027Cool\u0027 is currently being used) or \u0027hvac-dark-warm\u0027 \n\t# (if \u0027Warm\u0027 is currently being used).\n\t\n\tcurrTheme \u003d self.session.props.theme\n\t\n\tif currTheme not in [\u0027hvac-dark\u0027,\u0027hvac-dark-warm\u0027]:\n\t\tif currTheme \u003d\u003d \u0027hvac\u0027:\n\t\t\tself.session.props.theme \u003d \u0027hvac-dark\u0027\n\t\telif currTheme \u003d\u003d \u0027hvac-warm\u0027:\n\t\t\tself.session.props.theme \u003d \u0027hvac-dark-warm\u0027"
                              },
                              "scope": "G",
                              "type": "script"
                            }
                          }
                        },
                        "meta": {
                          "name": "Dark Cont"
                        },
                        "position": {
                          "basis": "50%",
                          "grow": 1
                        },
                        "propConfig": {
                          "props.style.backgroundColor": {
                            "binding": {
                              "config": {
                                "expression": "if({session.props.theme}\u003d\u0027hvac-dark\u0027 || {session.props.theme}\u003d\u0027hvac-dark-warm\u0027,\u0027--neutral-100\u0027,\u0027--neutral-30\u0027)"
                              },
                              "type": "expr"
                            }
                          },
                          "props.style.color": {
                            "binding": {
                              "config": {
                                "expression": "if({session.props.theme}\u003d\u0027hvac-dark\u0027 || {session.props.theme}\u003d\u0027hvac-dark-warm\u0027,\u0027--neutral-30\u0027,\u0027--neutral-90\u0027)"
                              },
                              "type": "expr"
                            }
                          },
                          "props.style.cursor": {
                            "binding": {
                              "config": {
                                "expression": "if({session.props.theme}\u003d\u0027hvac-dark\u0027 || {session.props.theme}\u003d\u0027hvac-dark-warm\u0027,\u0027auto\u0027,\u0027pointer\u0027)"
                              },
                              "type": "expr"
                            }
                          }
                        },
                        "props": {
                          "justify": "center",
                          "style": {
                            "fontSize": "12px",
                            "textAlign": "center"
                          }
                        },
                        "type": "ia.container.flex"
                      }
                    ],
                    "meta": {
                      "name": "Options"
                    },
                    "position": {
                      "basis": "200px",
                      "grow": 1
                    },
                    "props": {
                      "style": {
                        "borderColor": "--neutral-80",
                        "borderStyle": "solid",
                        "borderWidth": 1
                      }
                    },
                    "type": "ia.container.flex"
                  }
                ],
                "meta": {
                  "name": "Light Dark Cont"
                },
                "position": {
                  "basis": "30px",
                  "shrink": 0
                },
                "props": {
                  "style": {
                    "marginTop": "10px"
                  }
                },
                "type": "ia.container.flex"
              },
              {
                "children": [
                  {
                    "children": [
                      {
                        "children": [
                          {
                            "meta": {
                              "name": "Cool Ico"
                            },
                            "position": {
                              "basis": "20px",
                              "shrink": 0
                            },
                            "propConfig": {
                              "props.fill": {
                                "binding": {
                                  "config": {
                                    "expression": "if({session.props.theme}\u003d\u0027hvac\u0027 || {session.props.theme}\u003d\u0027hvac-dark\u0027,\u0027var(--neutral-30)\u0027,\u0027var(--neutral-90)\u0027)"
                                  },
                                  "type": "expr"
                                }
                              }
                            },
                            "props": {
                              "elements": [
                                {
                                  "d": "M0 0h24v24H0z",
                                  "fill": {
                                    "paint": "none"
                                  },
                                  "name": "path",
                                  "type": "path"
                                },
                                {
                                  "d": "M22 11h-4.17l3.24-3.24-1.41-1.42L15 11h-2V9l4.66-4.66-1.42-1.41L13 6.17V2h-2v4.17L7.76 2.93 6.34 4.34 11 9v2H9L4.34 6.34 2.93 7.76 6.17 11H2v2h4.17l-3.24 3.24 1.41 1.42L9 13h2v2l-4.66 4.66 1.42 1.41L11 17.83V22h2v-4.17l3.24 3.24 1.42-1.41L13 15v-2h2l4.66 4.66 1.41-1.42L17.83 13H22z",
                                  "name": "path",
                                  "type": "path"
                                }
                              ],
                              "viewBox": "0 0 24 24"
                            },
                            "type": "ia.shapes.svg"
                          },
                          {
                            "meta": {
                              "name": "Cool"
                            },
                            "position": {
                              "shrink": 0
                            },
                            "props": {
                              "style": {
                                "fontSize": "13px",
                                "paddingLeft": "2px",
                                "white-space": "nowrap"
                              },
                              "text": "Cool"
                            },
                            "type": "ia.display.label"
                          }
                        ],
                        "events": {
                          "dom": {
                            "onClick": {
                              "config": {
                                "script": "\t# If the current theme is not already cool, then set theme to either\n\t# \u0027hvac\u0027 (if \u0027Light\u0027 is currently being used) or \u0027hvac-dark\u0027 (if \u0027Dark\u0027\n\t# is currently being used).\n\t\n\tcurrTheme \u003d self.session.props.theme\n\t\n\tif currTheme not in [\u0027hvac-dark\u0027,\u0027hvac\u0027]:\n\t\tif currTheme \u003d\u003d \u0027hvac-warm\u0027:\n\t\t\tself.session.props.theme \u003d \u0027hvac\u0027\n\t\telif currTheme \u003d\u003d \u0027hvac-dark-warm\u0027:\n\t\t\tself.session.props.theme \u003d \u0027hvac-dark\u0027"
                              },
                              "scope": "G",
                              "type": "script"
                            }
                          }
                        },
                        "meta": {
                          "name": "Cool Cont"
                        },
                        "position": {
                          "basis": "50%",
                          "grow": 1
                        },
                        "propConfig": {
                          "props.style.backgroundColor": {
                            "binding": {
                              "config": {
                                "expression": "if({session.props.theme}\u003d\u0027hvac\u0027 || {session.props.theme}\u003d\u0027hvac-dark\u0027,\u0027--neutral-100\u0027,\u0027--neutral-30\u0027)"
                              },
                              "type": "expr"
                            }
                          },
                          "props.style.color": {
                            "binding": {
                              "config": {
                                "expression": "if({session.props.theme}\u003d\u0027hvac\u0027 || {session.props.theme}\u003d\u0027hvac-dark\u0027,\u0027--neutral-30\u0027,\u0027--neutral-90\u0027)"
                              },
                              "type": "expr"
                            }
                          },
                          "props.style.cursor": {
                            "binding": {
                              "config": {
                                "expression": "if({session.props.theme}\u003d\u0027hvac\u0027 || {session.props.theme}\u003d\u0027hvac-dark\u0027,\u0027auto\u0027,\u0027pointer\u0027)"
                              },
                              "type": "expr"
                            }
                          }
                        },
                        "props": {
                          "justify": "center",
                          "style": {
                            "borderRightColor": "--neutral-80",
                            "borderRightStyle": "solid",
                            "borderRightWidth": 1,
                            "fontSize": "12px",
                            "textAlign": "center"
                          }
                        },
                        "type": "ia.container.flex"
                      },
                      {
                        "children": [
                          {
                            "meta": {
                              "name": "Warm Ico"
                            },
                            "position": {
                              "basis": "20px",
                              "shrink": 0
                            },
                            "propConfig": {
                              "props.fill": {
                                "binding": {
                                  "config": {
                                    "expression": "if({session.props.theme}\u003d\u0027hvac-warm\u0027 || {session.props.theme}\u003d\u0027hvac-dark-warm\u0027,\u0027var(--neutral-30)\u0027,\u0027var(--neutral-90)\u0027)"
                                  },
                                  "type": "expr"
                                }
                              }
                            },
                            "props": {
                              "elements": [
                                {
                                  "elements": [
                                    {
                                      "fill": {
                                        "paint": "none"
                                      },
                                      "height": "24",
                                      "name": "rect",
                                      "type": "rect",
                                      "width": "24",
                                      "y": "0"
                                    }
                                  ],
                                  "name": "group",
                                  "type": "group"
                                },
                                {
                                  "elements": [
                                    {
                                      "d": "M19.48,12.35c-1.57-4.08-7.16-4.3-5.81-10.23c0.1-0.44-0.37-0.78-0.75-0.55C9.29,3.71,6.68,8,8.87,13.62 c0.18,0.46-0.36,0.89-0.75,0.59c-1.81-1.37-2-3.34-1.84-4.75c0.06-0.52-0.62-0.77-0.91-0.34C4.69,10.16,4,11.84,4,14.37 c0.38,5.6,5.11,7.32,6.81,7.54c2.43,0.31,5.06-0.14,6.95-1.87C19.84,18.11,20.6,15.03,19.48,12.35z M10.2,17.38 c1.44-0.35,2.18-1.39,2.38-2.31c0.33-1.43-0.96-2.83-0.09-5.09c0.33,1.87,3.27,3.04,3.27,5.08C15.84,17.59,13.1,19.76,10.2,17.38z",
                                      "name": "path",
                                      "type": "path"
                                    }
                                  ],
                                  "name": "group",
                                  "type": "group"
                                }
                              ],
                              "viewBox": "0 0 24 24"
                            },
                            "type": "ia.shapes.svg"
                          },
                          {
                            "meta": {
                              "name": "Warm"
                            },
                            "position": {
                              "shrink": 0
                            },
                            "props": {
                              "style": {
                                "fontSize": "13px",
                                "paddingLeft": "2px",
                                "white-space": "nowrap"
                              },
                              "text": "Warm"
                            },
                            "type": "ia.display.label"
                          }
                        ],
                        "events": {
                          "dom": {
                            "onClick": {
                              "config": {
                                "script": "\t# If the current theme is not already warm, then set theme to either\n\t# \u0027hvac-warm\u0027 (if \u0027Light\u0027 is currently being used) or \u0027hvac-dark-warm\u0027 \n\t# (if \u0027Dark\u0027 is currently being used).\n\t\n\tcurrTheme \u003d self.session.props.theme\n\t\n\tif currTheme not in [\u0027hvac-dark-warm\u0027,\u0027hvac-warm\u0027]:\n\t\tif currTheme \u003d\u003d \u0027hvac\u0027:\n\t\t\tself.session.props.theme \u003d \u0027hvac-warm\u0027\n\t\telif currTheme \u003d\u003d \u0027hvac-dark\u0027:\n\t\t\tself.session.props.theme \u003d \u0027hvac-dark-warm\u0027\t"
                              },
                              "scope": "G",
                              "type": "script"
                            }
                          }
                        },
                        "meta": {
                          "name": "Warm Cont"
                        },
                        "position": {
                          "basis": "50%",
                          "grow": 1
                        },
                        "propConfig": {
                          "props.style.backgroundColor": {
                            "binding": {
                              "config": {
                                "expression": "if({session.props.theme}\u003d\u0027hvac-warm\u0027 || {session.props.theme}\u003d\u0027hvac-dark-warm\u0027,\u0027--neutral-100\u0027,\u0027--neutral-30\u0027)"
                              },
                              "type": "expr"
                            }
                          },
                          "props.style.color": {
                            "binding": {
                              "config": {
                                "expression": "if({session.props.theme}\u003d\u0027hvac-warm\u0027 || {session.props.theme}\u003d\u0027hvac-dark-warm\u0027,\u0027--neutral-30\u0027,\u0027--neutral-90\u0027)"
                              },
                              "type": "expr"
                            }
                          },
                          "props.style.cursor": {
                            "binding": {
                              "config": {
                                "expression": "if({session.props.theme}\u003d\u0027hvac-warm\u0027 || {session.props.theme}\u003d\u0027hvac-dark-warm\u0027,\u0027auto\u0027,\u0027pointer\u0027)"
                              },
                              "type": "expr"
                            }
                          }
                        },
                        "props": {
                          "justify": "center",
                          "style": {
                            "fontSize": "12px",
                            "textAlign": "center"
                          }
                        },
                        "type": "ia.container.flex"
                      }
                    ],
                    "meta": {
                      "name": "Options"
                    },
                    "position": {
                      "basis": "200px",
                      "grow": 1
                    },
                    "props": {
                      "style": {
                        "borderColor": "--neutral-80",
                        "borderStyle": "solid",
                        "borderWidth": 1
                      }
                    },
                    "type": "ia.container.flex"
                  }
                ],
                "meta": {
                  "name": "Cool Warm Cont"
                },
                "position": {
                  "basis": "30px",
                  "shrink": 0
                },
                "props": {
                  "style": {
                    "marginTop": "20px"
                  }
                },
                "type": "ia.container.flex"
              }
            ],
            "meta": {
              "name": "Theme Cont"
            },
            "position": {
              "shrink": 0
            },
            "props": {
              "direction": "column",
              "style": {
                "marginTop": "30px",
                "zIndex": 0
              }
            },
            "type": "ia.container.flex"
          },
          {
            "children": [
              {
                "meta": {
                  "name": "Profile Image lbl"
                },
                "props": {
                  "style": {
                    "color": "--neutral-100",
                    "fontSize": "15px",
                    "white-space": "nowrap"
                  },
                  "text": "Profile Photo"
                },
                "type": "ia.display.label"
              },
              {
                "children": [
                  {
                    "meta": {
                      "name": "Image"
                    },
                    "position": {
                      "basis": "48px",
                      "shrink": 0
                    },
                    "propConfig": {
                      "position.display": {
                        "binding": {
                          "config": {
                            "struct": {
                              "image": "{/root.custom.userConfig.image}",
                              "useBuiltIn": "{/root.custom.userConfig.useBuiltIn}"
                            },
                            "waitOnAll": true
                          },
                          "transforms": [
                            {
                              "code": "\t# If user\u0027s \u0027usebuiltin\u0027 is equal to true, or if the user\u0027s \u0027profileimage\u0027 is None, \n\t# then do not display this Image component; otherwise display this Image component.\n\t\n\tif value[\u0027useBuiltIn\u0027] \u003d\u003d 1:\n\t\treturn False\n\telse:\n\t\tif value[\u0027image\u0027] \u003d\u003d None:\n\t\t\treturn False\n\t\telse:\n\t\t\treturn True",
                              "type": "script"
                            }
                          ],
                          "type": "expr-struct"
                        }
                      },
                      "props.source": {
                        "binding": {
                          "config": {
                            "path": "/root.custom.userConfig.image"
                          },
                          "transforms": [
                            {
                              "code": "\t# Create a byte array from the \u0027profileimage\u0027 bytes, write the\n\t# bytes to a \u0027file\u0027, use imghdr.what to attempt to determine the image\n\t# file type, create the \u0027source\u0027 which contains the image bytes encoded\n\t# in base64, close the file, and then return the \u0027source\u0027 string.\n\t\n\tfrom com.inductiveautomation.ignition.common import Base64\n\timport array\n\timport StringIO\n\timport imghdr\n\t\n\tdata \u003d value\n\tif data !\u003d None:\n\t\tf \u003d StringIO.StringIO()\n\t\tf.write(data)\n\t\t\n\t\tfileType \u003d imghdr.what(f)\n\t\tsource \u003d \"data:image/{};base64,{}\".format(fileType,Base64.encodeBytes(data))\n\t\tf.close()\n\telse:\n\t\tsource \u003d None\n\t\t\n\treturn source",
                              "type": "script"
                            }
                          ],
                          "type": "property"
                        }
                      }
                    },
                    "props": {
                      "fit": {
                        "height": 48,
                        "mode": "absolute",
                        "width": 48
                      },
                      "style": {
                        "clip-path": "circle(50%)"
                      }
                    },
                    "type": "ia.display.image"
                  },
                  {
                    "meta": {
                      "name": "Built In"
                    },
                    "position": {
                      "basis": "48px",
                      "shrink": 0
                    },
                    "propConfig": {
                      "position.display": {
                        "binding": {
                          "config": {
                            "path": "/root.custom.userConfig"
                          },
                          "transforms": [
                            {
                              "code": "\t# If user\u0027s \u0027usebuiltin\u0027 is equal to true, then return true (to display built-in \n\t# icon); otherwise if the user\u0027s \u0027profileimage\u0027 is equal to None, then return \n\t# true (to display built-in icon); else if the user\u0027s \u0027profileimage\u0027 is not equal \n\t# to None, then return false (do not display built-in icon).\n\t\n\tif bool(value[\u0027useBuiltIn\u0027]) \u003d\u003d False:\n\t\tif value[\u0027image\u0027] \u003d\u003d None:\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\telse:\n\t\treturn True",
                              "type": "script"
                            }
                          ],
                          "type": "property"
                        }
                      },
                      "props.params.name": {
                        "binding": {
                          "config": {
                            "expression": "if({/root.custom.userConfig.builtIn}\u003dNULL,\u0027Person\u0027,{/root.custom.userConfig.builtIn})"
                          },
                          "type": "expr"
                        }
                      }
                    },
                    "props": {
                      "params": {
                        "fill": "#b5b5b5",
                        "selected": false,
                        "showLabel": false
                      },
                      "path": "Building Automation Demo/Page/User Config/Framework/Built In Icon",
                      "style": {
                        "overflow": "hidden"
                      }
                    },
                    "type": "ia.display.view"
                  },
                  {
                    "meta": {
                      "name": "Profile Picture"
                    },
                    "position": {
                      "grow": 1,
                      "shrink": 0
                    },
                    "propConfig": {
                      "props.style.marginLeft": {
                        "binding": {
                          "config": {
                            "expression": "if({/root.custom.userConfig.useBuiltIn}\u003d0 \u0026\u0026 {/root.custom.userConfig.image}\u003dNULL,\u00270px\u0027,\u00275px\u0027)"
                          },
                          "type": "expr"
                        }
                      },
                      "props.text": {
                        "binding": {
                          "config": {
                            "struct": {
                              "builtIn": "{/root.custom.userConfig.builtIn}",
                              "imageStr": "{/root.custom.userConfig.imageStr}",
                              "useBuiltIn": "{/root.custom.userConfig.useBuiltIn}"
                            },
                            "waitOnAll": true
                          },
                          "transforms": [
                            {
                              "code": "\t# If \u0027usebuiltin\u0027 is true but \u0027builtin\u0027 is null, then return \u0027Person\u0027. If\n\t# \u0027usebuiltin\u0027 is true and \u0027builtin\u0027 is not null, then return the name of\n\t# the built-in icon. If \u0027usebuiltin\u0027 is false and \u0027imageStr\u0027 (name of last\n\t# file uploaded) is null, then return the name of the built-in icon if\n\t# \u0027builtin\u0027 is not equal to null, otherwise return \u0027Person\u0027. If \u0027usebuiltin\u0027\n\t# is false and \u0027imageStr\u0027 is not equal to null, then return \u0027imageStr\u0027.\n\t\n\tif value[\u0027useBuiltIn\u0027] \u003d\u003d 1:\n\t\tif value[\u0027builtIn\u0027] \u003d\u003d None:\n\t\t\treturn \u0027Person\u0027\n\t\telse:\n\t\t\treturn value[\u0027builtIn\u0027]\n\telse:\n\t\tif value[\u0027imageStr\u0027] \u003d\u003d None:\n\t\t\treturn value[\u0027builtIn\u0027] if value[\u0027builtIn\u0027] !\u003d None else \u0027Person\u0027\n\t\telse:\n\t\t\treturn value[\u0027imageStr\u0027]",
                              "type": "script"
                            }
                          ],
                          "type": "expr-struct"
                        }
                      }
                    },
                    "props": {
                      "style": {
                        "backgroundColor": "--neutral-30",
                        "borderBottomColor": "--neutral-50",
                        "borderBottomStyle": "solid",
                        "borderBottomWidth": "1px",
                        "borderLeftStyle": "none",
                        "borderRightStyle": "none",
                        "borderTopStyle": "none",
                        "fontSize": "14px",
                        "marginBottom": "10px",
                        "marginTop": "10px",
                        "outlineStyle": "none"
                      }
                    },
                    "type": "ia.display.label"
                  },
                  {
                    "children": [
                      {
                        "meta": {
                          "name": "Add Photo"
                        },
                        "position": {
                          "basis": "17px",
                          "shrink": 0
                        },
                        "props": {
                          "elements": [
                            {
                              "fill": {
                                "paint": "none"
                              },
                              "height": "24",
                              "name": "rect",
                              "type": "rect",
                              "width": "24"
                            },
                            {
                              "d": "M3,4V1h2v3h3v2H5v3H3V6H0V4H3z M6,10V7h3V4h7l1.83,2H21c1.1,0,2,0.9,2,2v12c0,1.1-0.9,2-2,2H5c-1.1,0-2-0.9-2-2V10H6z M13,19c2.76,0,5-2.24,5-5s-2.24-5-5-5s-5,2.24-5,5S10.24,19,13,19z M9.8,14c0,1.77,1.43,3.2,3.2,3.2s3.2-1.43,3.2-3.2 s-1.43-3.2-3.2-3.2S9.8,12.23,9.8,14z",
                              "name": "path",
                              "type": "path"
                            }
                          ],
                          "style": {
                            "transition": "fill 0.25s linear"
                          },
                          "viewBox": "0 0 24 24"
                        },
                        "type": "ia.shapes.svg"
                      },
                      {
                        "meta": {
                          "name": "Upload"
                        },
                        "position": {
                          "shrink": 0
                        },
                        "props": {
                          "style": {
                            "paddingLeft": "5px"
                          },
                          "text": "Change photo"
                        },
                        "type": "ia.display.label"
                      }
                    ],
                    "events": {
                      "dom": {
                        "onClick": {
                          "config": {
                            "script": "\t# Set addPhoto to true, which will make the \u0027Add Photo\u0027 container visible.\n\t\n\tself.view.getChild(\"root\").custom.addPhoto \u003d True"
                          },
                          "scope": "G",
                          "type": "script"
                        }
                      }
                    },
                    "meta": {
                      "name": "Upload Cont"
                    },
                    "position": {
                      "basis": "115px",
                      "shrink": 0
                    },
                    "props": {
                      "justify": "center",
                      "style": {
                        "classes": "building-automation-demo/page/general-button",
                        "marginBottom": "10px",
                        "marginLeft": "10px",
                        "marginTop": "10px",
                        "overflow": "hidden",
                        "paddingBottom": "5px",
                        "paddingTop": "5px",
                        "transition": "border-color 0.25s linear"
                      }
                    },
                    "type": "ia.container.flex"
                  }
                ],
                "meta": {
                  "name": "Profile Image And Upload Cont"
                },
                "position": {
                  "basis": "48px",
                  "grow": 1,
                  "shrink": 0
                },
                "propConfig": {
                  "props.style.marginTop": {
                    "binding": {
                      "config": {
                        "expression": "if({/root.custom.userConfig.useBuiltIn}\u003d0 \u0026\u0026 {/root.custom.userConfig.image}\u003dNULL,\u00270px\u0027,\u00274px\u0027)"
                      },
                      "type": "expr"
                    }
                  }
                },
                "props": {
                  "style": {
                    "overflow": "hidden"
                  }
                },
                "type": "ia.container.flex"
              }
            ],
            "meta": {
              "name": "Profile Image Cont"
            },
            "position": {
              "basis": "70px",
              "shrink": 0
            },
            "props": {
              "direction": "column",
              "style": {
                "marginTop": "35px",
                "overflow": "visible",
                "zIndex": 0
              }
            },
            "type": "ia.container.flex"
          },
          {
            "children": [
              {
                "meta": {
                  "name": "Title lbl"
                },
                "props": {
                  "style": {
                    "color": "--neutral-100",
                    "fontSize": "15px",
                    "white-space": "nowrap"
                  },
                  "text": "Title"
                },
                "type": "ia.display.label"
              },
              {
                "meta": {
                  "name": "Title"
                },
                "position": {
                  "basis": "32px"
                },
                "propConfig": {
                  "props.text": {
                    "binding": {
                      "config": {
                        "path": "/root.custom.userConfig.title"
                      },
                      "transforms": [
                        {
                          "code": "\tif value \u003d\u003d None:\n\t\treturn \u0027Guest\u0027\n\telse:\n\t\treturn value",
                          "type": "script"
                        }
                      ],
                      "type": "property"
                    }
                  }
                },
                "props": {
                  "style": {
                    "backgroundColor": "--neutral-30",
                    "borderBottomStyle": "solid",
                    "borderLeftStyle": "none",
                    "borderRightStyle": "none",
                    "borderTopStyle": "none",
                    "fontSize": "14px",
                    "outlineStyle": "none"
                  }
                },
                "type": "ia.input.text-field"
              }
            ],
            "meta": {
              "name": "Title Cont"
            },
            "position": {
              "basis": "50px",
              "grow": 1,
              "shrink": 0
            },
            "props": {
              "direction": "column",
              "style": {
                "marginTop": "30px",
                "overflow": "visible",
                "zIndex": 0
              }
            },
            "type": "ia.container.flex"
          },
          {
            "children": [
              {
                "events": {
                  "component": {
                    "onActionPerformed": {
                      "config": {
                        "script": "\tif self.session.props.theme !\u003d self.view.params.currTheme:\t\t\n\t\tthemeMap \u003d {\u0027lightCool\u0027:\u0027hvac\u0027,\u0027darkCool\u0027:\u0027hvac-dark\u0027,\u0027lightWarm\u0027:\u0027hvac-warm\u0027,\u0027darkWarm\u0027:\u0027hvac-dark-warm\u0027}\n\t\tif themeMap[self.session.custom.user.theme] !\u003d self.session.props.theme:\n\t\t\tself.session.props.theme \u003d self.view.params.currTheme\n\t\n\tsystem.perspective.closePopup(\u0027settings\u0027)"
                      },
                      "scope": "G",
                      "type": "script"
                    }
                  }
                },
                "meta": {
                  "name": "Cancel"
                },
                "position": {
                  "basis": "45%"
                },
                "props": {
                  "style": {
                    "backgroundColor": "--neutral-30",
                    "color": "--neutral-100",
                    "cursor": "pointer"
                  },
                  "text": "Cancel"
                },
                "type": "ia.input.button"
              },
              {
                "events": {
                  "component": {
                    "onActionPerformed": {
                      "config": {
                        "script": "\timport array\n\timport java.lang.Exception\n\t\t\n\t# Define themeMap which maps the underlying theme names with theme names\n\t# being saved in the db.\n\tthemeMap \u003d {\u0027hvac\u0027:\u0027lightCool\u0027,\u0027hvac-dark\u0027:\u0027darkCool\u0027,\u0027hvac-warm\u0027:\u0027lightWarm\u0027,\u0027hvac-dark-warm\u0027:\u0027darkWarm\u0027}\n\t\n\t# Retrieve the title for the user.\n\ttitle \u003d self.parent.parent.getChild(\"Title Cont\").getChild(\"Title\").props.text\n\t\n\t# Retrieve the updated userConfig.\n\tuserConfig \u003d self.view.getChild(\"root\").custom.userConfig\n\t\n\t# Define the params for the updateUser named query. If userConfig.image\n\t# is not equal to null, then convert the image to a byte array. If title\n\t# is still displaying \u0027Guest\u0027 (default title if this column is null in\n\t# the db), then supply null for the title param.\n\tparams \u003d ({\u0027id\u0027:userConfig.id,\u0027builtin\u0027:userConfig.builtIn,\n\t\u0027imagestr\u0027:userConfig.imageStr,\n\t\u0027profileimage\u0027:array.array(\u0027b\u0027,userConfig.image) if userConfig.image !\u003d None else None,\n\t\u0027defaultdash\u0027:userConfig.defaultDash,\u0027theme\u0027:themeMap[self.session.props.theme],\n\t\u0027usebuiltin\u0027:userConfig.useBuiltIn,\u0027title\u0027:title if title !\u003d \u0027Guest\u0027 else None})\n\t\n\t# Try to update the info in the db for this user. Then, refresh the binding\n\t# on the user custom session property (to retrieve the updated config), and\n\t# then notify user that the settings were saved. Utilize try-except so that\n\t# if the save fails, can show a notification informing the user that the\n\t# save failed (and also use logger to log the reason why the save failed).\n\t\n\tlogger \u003d system.util.getLogger(\u0027userConfig\u0027)\n\ttry:\n\t\tsystem.db.runNamedQuery(\u0027User/updateUser\u0027,parameters\u003dparams)\n\t\tself.session.refreshBinding(\u0027custom.user\u0027)\n\t\tself.parent.parent.parent.getChild(\"Results Cont\").getChild(\"Results\").getChild(\"Label\").props.text \u003d \u0027Settings saved!\u0027\n\texcept Exception, e:\n\t\tlogger.info(str(e.message) + \u0027, \u0027 + str(e.args))\n\t\tself.parent.parent.parent.getChild(\"Results Cont\").getChild(\"Results\").getChild(\"Label\").props.text \u003d \u0027Settings not saved\u0027\n\texcept java.lang.Exception, e:\n\t\tlogger.info(str(e))\n\t\tself.parent.parent.parent.getChild(\"Results Cont\").getChild(\"Results\").getChild(\"Label\").props.text \u003d \u0027Settings not saved\u0027\n\t\n\t# Utilize transform to rotate the \u0027notification\u0027 such that it becomes visible\n\t# to the user (letting user know if save was successful or not).\n\tself.parent.parent.parent.getChild(\"Results Cont\").getChild(\"Results\").props.style.transform \u003d \u0027rotateX(0deg)\u0027\n\t\n\t# Utilize Timer to re-hide the \u0027notification\u0027 after 3 seconds.\n\tfrom threading import Timer\n\t\n\tdef hidePopup():\n\t\t\"\"\"\n\t\tSets the transform style property of the Results container\n\t\t\tto \u0027rotateX(90deg)\u0027, which rotates the container by 90\n\t\t\tdegrees on the x-axis. Visually, this causes the\n\t\t\tnotification to \u0027swing\u0027 upwards out of view. \n\t\t\t\t\n\t\tArgs:\n\t\t\tThis function does not contain any args.\n\t\t\t\t\n\t\tReturns:\n\t\t\tThis function does not return a value.\n\t\t\"\"\"\n\t\t\n\t\tself.parent.parent.parent.getChild(\"Results Cont\").getChild(\"Results\").props.style.transform \u003d \u0027rotateX(90deg)\u0027\n\t\n\tTimer(3.0,hidePopup,[]).start()"
                      },
                      "scope": "G",
                      "type": "script"
                    }
                  }
                },
                "meta": {
                  "name": "Save"
                },
                "position": {
                  "basis": "45%"
                },
                "props": {
                  "style": {
                    "background-color": "--neutral-90",
                    "cursor": "pointer",
                    "marginLeft": "10%",
                    "marginTop": "4px"
                  },
                  "text": "Save Settings"
                },
                "type": "ia.input.button"
              }
            ],
            "meta": {
              "name": "Options"
            },
            "position": {
              "basis": "35px",
              "shrink": 0
            },
            "props": {
              "justify": "flex-end",
              "style": {
                "marginTop": "25px"
              }
            },
            "type": "ia.container.flex"
          }
        ],
        "meta": {
          "name": "Settings Cont"
        },
        "position": {
          "basis": "200px",
          "grow": 1
        },
        "propConfig": {
          "position.display": {
            "binding": {
              "config": {
                "expression": "{parent.custom.addPhoto}\u003dFalse"
              },
              "type": "expr"
            }
          }
        },
        "props": {
          "direction": "column",
          "style": {
            "marginBottom": "12px",
            "marginLeft": "15px",
            "marginRight": "15px",
            "marginTop": "10px"
          }
        },
        "type": "ia.container.flex"
      },
      {
        "children": [
          {
            "children": [
              {
                "events": {
                  "dom": {
                    "onClick": {
                      "config": {
                        "script": "\tif self.view.getChild(\"root\").custom.userConfig.useBuiltIn \u003d\u003d 0 and self.view.getChild(\"root\").custom.userConfig.image \u003d\u003d None:\n\t\n\t\tself.parent.parent.parent.getChild(\"Results Cont\").getChild(\"Results\").getChild(\"Label\").props.text \u003d \u0027Please select a built-in icon or upload an image.\u0027\n\t\t\n\t\t# Utilize transform to rotate the \u0027notification\u0027 such that it becomes visible\n\t\t# to the user.\n\t\tself.parent.parent.parent.getChild(\"Results Cont\").getChild(\"Results\").props.style.transform \u003d \u0027rotateX(0deg)\u0027\n\t\t\n\t\t# Utilize Timer to re-hide the \u0027notification\u0027 after 3 seconds.\n\t\tfrom threading import Timer\n\t\t\n\t\tdef hidePopup():\n\t\t\t\"\"\"\n\t\t\tSets the transform style property of the Results container\n\t\t\t\tto \u0027rotateX(90deg)\u0027, which rotates the container by 90\n\t\t\t\tdegrees on the x-axis. Visually, this causes the\n\t\t\t\tnotification to \u0027swing\u0027 upwards out of view. \n\t\t\t\t\t\n\t\t\tArgs:\n\t\t\t\tThis function does not contain any args.\n\t\t\t\t\t\n\t\t\tReturns:\n\t\t\t\tThis function does not return a value.\n\t\t\t\"\"\"\n\t\t\t\n\t\t\tself.parent.parent.parent.getChild(\"Results Cont\").getChild(\"Results\").props.style.transform \u003d \u0027rotateX(90deg)\u0027\n\t\t\n\t\tTimer(3.0,hidePopup,[]).start()\n\telse:\n\t\t# Set addPhoto to false, which causes the Settings container to become visible.\n\t\tself.view.getChild(\"root\").custom.addPhoto \u003d False"
                      },
                      "scope": "G",
                      "type": "script"
                    }
                  }
                },
                "meta": {
                  "name": "Go Back"
                },
                "position": {
                  "basis": "24px"
                },
                "props": {
                  "elements": [
                    {
                      "d": "M0 0h24v24H0z",
                      "fill": {
                        "paint": "none"
                      },
                      "name": "path",
                      "type": "path"
                    },
                    {
                      "d": "M20 11H7.83l5.59-5.59L12 4l-8 8 8 8 1.41-1.41L7.83 13H20v-2z",
                      "name": "path",
                      "type": "path"
                    }
                  ],
                  "fill": "var(--neutral-80)",
                  "style": {
                    "cursor": "pointer"
                  },
                  "viewBox": "0 0 24 24"
                },
                "type": "ia.shapes.svg"
              },
              {
                "meta": {
                  "name": "Label"
                },
                "position": {
                  "basis": "50px",
                  "grow": 1
                },
                "props": {
                  "style": {
                    "color": "--neutral-100",
                    "fontSize": "16px",
                    "fontWeight": "bold",
                    "paddingRight": "35px",
                    "textAlign": "center"
                  },
                  "text": "Change profile photo"
                },
                "type": "ia.display.label"
              }
            ],
            "meta": {
              "name": "Header"
            },
            "position": {
              "basis": "23px",
              "shrink": 0
            },
            "type": "ia.container.flex"
          },
          {
            "children": [
              {
                "children": [
                  {
                    "meta": {
                      "name": "Label"
                    },
                    "propConfig": {
                      "props.style.borderBottomStyle": {
                        "binding": {
                          "config": {
                            "expression": "if({...../Add Photo.custom.currTab}\u003d\u0027builtIn\u0027,\u0027solid\u0027,\u0027none\u0027)"
                          },
                          "type": "expr"
                        }
                      },
                      "props.style.color": {
                        "binding": {
                          "config": {
                            "expression": "if({...../Add Photo.custom.currTab}\u003d\u0027builtIn\u0027,\u0027--neutral-100\u0027,\u0027--neutral-70\u0027)"
                          },
                          "type": "expr"
                        }
                      }
                    },
                    "props": {
                      "style": {
                        "borderBottomColor": "--neutral-100",
                        "borderBottomWidth": "1.5px",
                        "fontSize": "12px",
                        "fontWeight": "bold"
                      },
                      "text": "Built-In"
                    },
                    "type": "ia.display.label"
                  }
                ],
                "events": {
                  "dom": {
                    "onClick": {
                      "config": {
                        "script": "\t# Change currTab to \u0027builtIn\u0027, which causes the list of built-in icons to\n\t# become visible. Also set useBuiltIn to true in user config (if user\n\t# presses \u0027builtIn\u0027 tab, assume that user wants to use a built-in icon\n\t# instead of uploading a profile image). \n\t\n\tself.parent.parent.parent.getChild(\"Add Photo\").custom.currTab \u003d \u0027builtIn\u0027\n\tself.view.getChild(\"root\").custom.userConfig.useBuiltIn \u003d 1"
                      },
                      "scope": "G",
                      "type": "script"
                    }
                  }
                },
                "meta": {
                  "name": "Built In"
                },
                "position": {
                  "basis": "48%",
                  "shrink": 0
                },
                "props": {
                  "alignContent": "center",
                  "alignItems": "center",
                  "justify": "center",
                  "style": {
                    "classes": "building-automation-demo/page/user-config/user-config-lg/tab"
                  }
                },
                "type": "ia.container.flex"
              },
              {
                "children": [
                  {
                    "meta": {
                      "name": "Label"
                    },
                    "propConfig": {
                      "props.style.borderBottomStyle": {
                        "binding": {
                          "config": {
                            "expression": "if({...../Add Photo.custom.currTab}\u003d\u0027fromComputer\u0027,\u0027solid\u0027,\u0027none\u0027)"
                          },
                          "type": "expr"
                        }
                      },
                      "props.style.color": {
                        "binding": {
                          "config": {
                            "expression": "if({...../Add Photo.custom.currTab}\u003d\u0027fromComputer\u0027,\u0027--neutral-100\u0027,\u0027--neutral-70\u0027)"
                          },
                          "type": "expr"
                        }
                      }
                    },
                    "props": {
                      "style": {
                        "borderBottomColor": "--neutral-100",
                        "borderBottomWidth": "1.5px",
                        "fontSize": "12px",
                        "fontWeight": "bold"
                      },
                      "text": "From computer"
                    },
                    "type": "ia.display.label"
                  }
                ],
                "events": {
                  "dom": {
                    "onClick": {
                      "config": {
                        "script": "\t# Change currTab to \u0027fromComputer\u0027, which causes the file upload component\n\t# to become visible. Also set useBuiltIn to false in user config (if user\n\t# presses \u0027fromComputer\u0027 tab, assume that user wants to upload an image). \n\t\n\tself.parent.parent.parent.getChild(\"Add Photo\").custom.currTab \u003d \u0027fromComputer\u0027\n\tself.view.getChild(\"root\").custom.userConfig.useBuiltIn \u003d 0"
                      },
                      "scope": "G",
                      "type": "script"
                    }
                  }
                },
                "meta": {
                  "name": "From computer"
                },
                "position": {
                  "basis": "52%",
                  "shrink": 0
                },
                "props": {
                  "alignContent": "center",
                  "alignItems": "center",
                  "justify": "center",
                  "style": {
                    "classes": "building-automation-demo/page/user-config/user-config-lg/tab"
                  }
                },
                "type": "ia.container.flex"
              }
            ],
            "meta": {
              "name": "Tabs Cont"
            },
            "position": {
              "basis": "35px",
              "shrink": 0
            },
            "propConfig": {
              "props.style.marginBottom": {
                "binding": {
                  "config": {
                    "expression": "if({parent.custom.currTab}\u003d\u0027fromComputer\u0027,\u002710px\u0027,\u002710px\u0027)"
                  },
                  "type": "expr"
                }
              }
            },
            "type": "ia.container.flex"
          },
          {
            "custom": {
              "options": [
                {
                  "fill": "#b5b5b5",
                  "instancePosition": {},
                  "instanceStyle": {
                    "classes": "",
                    "marginBottom": "10px"
                  },
                  "name": "Person",
                  "selected": false
                },
                {
                  "fill": "#b5b5b5",
                  "instancePosition": {},
                  "instanceStyle": {
                    "classes": "",
                    "marginBottom": "10px"
                  },
                  "name": "Engineer",
                  "selected": false
                },
                {
                  "fill": "#b5b5b5",
                  "instancePosition": {},
                  "instanceStyle": {
                    "classes": ""
                  },
                  "name": "Face",
                  "selected": false
                },
                {
                  "fill": "#b5b5b5",
                  "instancePosition": {},
                  "instanceStyle": {
                    "classes": ""
                  },
                  "name": "Ignition",
                  "selected": false
                }
              ]
            },
            "meta": {
              "name": "Built In Icons"
            },
            "position": {
              "basis": "320px"
            },
            "propConfig": {
              "position.display": {
                "binding": {
                  "config": {
                    "expression": "{parent.custom.currTab}\u003d\u0027builtIn\u0027"
                  },
                  "type": "expr"
                }
              },
              "props.instances": {
                "binding": {
                  "config": {
                    "struct": {
                      "builtIn": "{/root.custom.userConfig.builtIn}"
                    },
                    "waitOnAll": true
                  },
                  "transforms": [
                    {
                      "code": "\t# Create the built-in icon instances, and utilize the built-in icon path\n\t# to make sure that the correct built-in icon is selected.\n\t\n\tbuiltInDB \u003d value[\u0027builtIn\u0027] if value[\u0027builtIn\u0027] !\u003d None else \u0027Person\u0027\n\t\n\tinstances \u003d []\n\tfor option in self.custom.options:\n\t\tinstanceStyle \u003d option.instanceStyle\n\t\tinstancePos \u003d option.instancePosition\n\t\tname \u003d option.name\n\t\tfill \u003d option.fill\n\t\t\n\t\tif name \u003d\u003d builtInDB:\n\t\t\tselected \u003d True\n\t\telse:\n\t\t\tselected \u003d False\n\t\n\t\tobj \u003d {\"instanceStyle\": instanceStyle,\"instancePosition\": instancePos,\"name\": name,\"fill\": fill,\"selected\": selected}\n\t\n\t\tinstances.append(obj)\n\t\n\treturn instances",
                      "type": "script"
                    }
                  ],
                  "type": "expr-struct"
                }
              }
            },
            "props": {
              "elementPosition": {
                "basis": "85px",
                "shrink": 0
              },
              "elementStyle": {
                "borderRadius": "8px",
                "marginLeft": "50px",
                "marginRight": "50px"
              },
              "justify": "center",
              "path": "Building Automation Demo/Page/User Config/Framework/Built In Icon",
              "useDefaultViewHeight": false,
              "useDefaultViewWidth": false,
              "wrap": "wrap"
            },
            "type": "ia.display.flex-repeater"
          },
          {
            "events": {
              "component": {
                "onFileReceived": {
                  "config": {
                    "script": "\t# Get the bytes and file name of the image and update userConfig.image (bytes)\n\t# and userConfig.imageStr (file name).\n\tdata \u003d event.file.getBytes()\n\tself.view.getChild(\"root\").custom.userConfig.image \u003d data\n\tself.view.getChild(\"root\").custom.userConfig.imageStr \u003d event.file.name"
                  },
                  "scope": "G",
                  "type": "script"
                }
              }
            },
            "meta": {
              "name": "File Upload"
            },
            "position": {
              "basis": "135px",
              "grow": 1,
              "shrink": 0
            },
            "propConfig": {
              "position.display": {
                "binding": {
                  "config": {
                    "expression": "{parent.custom.currTab}\u003d\u0027fromComputer\u0027"
                  },
                  "type": "expr"
                }
              }
            },
            "props": {
              "fileSizeLimit": 0.06,
              "fileUploadIcon": {
                "style": {
                  "classes": ""
                }
              },
              "maxUploads": 1,
              "supportedFileTypes": [
                "png",
                "jpg",
                "jpeg"
              ]
            },
            "type": "ia.input.fileupload"
          },
          {
            "children": [
              {
                "meta": {
                  "name": "Profile lbl"
                },
                "props": {
                  "style": {
                    "fontSize": "15px",
                    "marginRight": "1px",
                    "white-space": "nowrap"
                  },
                  "text": "Profile Photo"
                },
                "type": "ia.display.label"
              },
              {
                "children": [
                  {
                    "meta": {
                      "name": "Image"
                    },
                    "position": {
                      "basis": "48px",
                      "shrink": 0
                    },
                    "propConfig": {
                      "position.display": {
                        "binding": {
                          "config": {
                            "struct": {
                              "image": "{/root.custom.userConfig.image}",
                              "useBuiltIn": "{/root.custom.userConfig.useBuiltIn}"
                            },
                            "waitOnAll": true
                          },
                          "transforms": [
                            {
                              "code": "\t# If useBuiltIn is true, then do not display this image component. If\n\t# useBuiltIn is false and image bytes are not null, then display this\n\t# image. If useBuiltIn is false and image bytes are null, then do not\n\t# display this image component.\n\t\n\tif value[\u0027useBuiltIn\u0027] \u003d\u003d 1:\n\t\treturn False\n\telse:\n\t\tif value[\u0027image\u0027] \u003d\u003d None:\n\t\t\treturn False\n\t\telse:\n\t\t\treturn True",
                              "type": "script"
                            }
                          ],
                          "type": "expr-struct"
                        }
                      },
                      "props.source": {
                        "binding": {
                          "config": {
                            "path": "/root.custom.userConfig.image"
                          },
                          "transforms": [
                            {
                              "code": "\t# Create a byte array from the \u0027profileimage\u0027 bytes, write the\n\t# bytes to a \u0027file\u0027, use imghdr.what to attempt to determine the image\n\t# file type, create the \u0027source\u0027 which contains the image bytes encoded\n\t# in base64, close the file, and then return the \u0027source\u0027 string.\n\t\n\tfrom com.inductiveautomation.ignition.common import Base64\n\timport array\n\timport StringIO\n\timport imghdr\n\t\n\tdata \u003d value\n\tif data !\u003d None:\n\t\tf \u003d StringIO.StringIO()\n\t\tf.write(data)\n\t\t\n\t\tfileType \u003d imghdr.what(f)\n\t\tsource \u003d \"data:image/{};base64,{}\".format(fileType,Base64.encodeBytes(data))\n\t\tf.close()\n\telse:\n\t\tsource \u003d None\n\t\t\n\treturn source",
                              "type": "script"
                            }
                          ],
                          "type": "property"
                        }
                      }
                    },
                    "props": {
                      "fit": {
                        "height": 48,
                        "mode": "absolute",
                        "width": 48
                      },
                      "style": {
                        "clip-path": "circle(50%)"
                      }
                    },
                    "type": "ia.display.image"
                  },
                  {
                    "meta": {
                      "name": "Built In"
                    },
                    "position": {
                      "basis": "48px",
                      "shrink": 0
                    },
                    "propConfig": {
                      "position.display": {
                        "binding": {
                          "config": {
                            "path": "/root.custom.userConfig"
                          },
                          "transforms": [
                            {
                              "code": "\t# Only display built-in icon if useBuiltIn is set to true.\n\t\n\tif bool(value[\u0027useBuiltIn\u0027]) \u003d\u003d False:\n\t\treturn False\n\telse:\n\t\treturn True",
                              "type": "script"
                            }
                          ],
                          "type": "property"
                        }
                      },
                      "props.params.name": {
                        "binding": {
                          "config": {
                            "expression": "if({/root.custom.userConfig.builtIn}\u003dNULL,\u0027Person\u0027,{/root.custom.userConfig.builtIn})"
                          },
                          "type": "expr"
                        }
                      }
                    },
                    "props": {
                      "params": {
                        "fill": "#b5b5b5",
                        "selected": false,
                        "showLabel": false
                      },
                      "path": "Building Automation Demo/Page/User Config/Framework/Built In Icon",
                      "style": {
                        "overflow": "hidden"
                      }
                    },
                    "type": "ia.display.view"
                  },
                  {
                    "meta": {
                      "name": "Profile Picture"
                    },
                    "position": {
                      "grow": 1,
                      "shrink": 0
                    },
                    "propConfig": {
                      "props.style.marginLeft": {
                        "binding": {
                          "config": {
                            "expression": "if({/root.custom.userConfig.useBuiltIn}\u003d0 \u0026\u0026 {/root.custom.userConfig.image}\u003dNULL,\u00270px\u0027,\u00275px\u0027)"
                          },
                          "type": "expr"
                        }
                      },
                      "props.text": {
                        "binding": {
                          "config": {
                            "struct": {
                              "builtIn": "{/root.custom.userConfig.builtIn}",
                              "imageStr": "{/root.custom.userConfig.imageStr}",
                              "useBuiltIn": "{/root.custom.userConfig.useBuiltIn}"
                            },
                            "waitOnAll": true
                          },
                          "transforms": [
                            {
                              "code": "\t# Display \u0027Person\u0027 or the built-in icon path (could also be \u0027Person\u0027)\n\t# if useBuiltIn is true. Display \u0027No picture uploaded\u0027 or the file name\n\t# of the image if useBuiltIn is false.\n\t\n\tif value[\u0027useBuiltIn\u0027] \u003d\u003d 1:\n\t\tif value[\u0027builtIn\u0027] \u003d\u003d None:\n\t\t\treturn \u0027Person\u0027\n\t\telse:\n\t\t\treturn value[\u0027builtIn\u0027]\n\telse:\n\t\tif value[\u0027imageStr\u0027] \u003d\u003d None:\n\t\t\treturn \u0027No picture uploaded\u0027\n\t\telse:\n\t\t\treturn value[\u0027imageStr\u0027]",
                              "type": "script"
                            }
                          ],
                          "type": "expr-struct"
                        }
                      }
                    },
                    "props": {
                      "style": {
                        "backgroundColor": "--neutral-30",
                        "borderBottomColor": "--neutral-50",
                        "borderBottomStyle": "solid",
                        "borderBottomWidth": "1px",
                        "borderLeftStyle": "none",
                        "borderRightStyle": "none",
                        "borderTopStyle": "none",
                        "fontSize": "14px",
                        "marginBottom": "10px",
                        "marginTop": "10px",
                        "outlineStyle": "none"
                      }
                    },
                    "type": "ia.display.label"
                  },
                  {
                    "events": {
                      "dom": {
                        "onClick": {
                          "config": {
                            "script": "\t# Clear out image bytes and image file name.\n\t\n\tself.view.getChild(\"root\").custom.userConfig.image \u003d None\n\tself.view.getChild(\"root\").custom.userConfig.imageStr \u003d None"
                          },
                          "scope": "G",
                          "type": "script"
                        }
                      }
                    },
                    "meta": {
                      "name": "Clear",
                      "tooltip": {
                        "enabled": true,
                        "text": "DELETE PICTURE"
                      }
                    },
                    "position": {
                      "basis": "22px"
                    },
                    "propConfig": {
                      "position.display": {
                        "binding": {
                          "config": {
                            "expression": "{/root.custom.userConfig.image}!\u003dNULL \u0026\u0026 {/root.custom.userConfig.useBuiltIn}\u003d0"
                          },
                          "type": "expr"
                        }
                      }
                    },
                    "props": {
                      "elements": [
                        {
                          "d": "M0 0h24v24H0V0z",
                          "fill": {
                            "paint": "none"
                          },
                          "name": "path",
                          "type": "path"
                        },
                        {
                          "d": "M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12 19 6.41z",
                          "name": "path",
                          "type": "path"
                        }
                      ],
                      "fill": "var(--neutral-50)",
                      "style": {
                        "borderBottomColor": "--neutral-50",
                        "borderBottomStyle": "solid",
                        "borderBottomWidth": "1px",
                        "borderLeftStyle": "none",
                        "borderRightStyle": "none",
                        "borderTopStyle": "none",
                        "cursor": "pointer",
                        "marginBottom": "10px"
                      },
                      "viewBox": "0 0 24 24"
                    },
                    "type": "ia.shapes.svg"
                  }
                ],
                "meta": {
                  "name": "Picture Cont"
                },
                "position": {
                  "basis": "48px",
                  "grow": 1,
                  "shrink": 0
                },
                "propConfig": {
                  "props.style.marginTop": {
                    "binding": {
                      "config": {
                        "expression": "if({/root.custom.userConfig.useBuiltIn}\u003d0 \u0026\u0026 {/root.custom.userConfig.image}\u003dNULL,\u00270px\u0027,\u00274px\u0027)"
                      },
                      "type": "expr"
                    }
                  }
                },
                "type": "ia.container.flex"
              }
            ],
            "meta": {
              "name": "Profile Picture"
            },
            "position": {
              "basis": "75px",
              "shrink": 0
            },
            "props": {
              "direction": "column",
              "style": {
                "marginTop": "15px",
                "overflow": "hidden"
              }
            },
            "type": "ia.container.flex"
          }
        ],
        "custom": {
          "currTab": "fromComputer"
        },
        "meta": {
          "name": "Add Photo"
        },
        "position": {
          "basis": "200px",
          "grow": 1
        },
        "propConfig": {
          "position.display": {
            "binding": {
              "config": {
                "expression": "{parent.custom.addPhoto}"
              },
              "type": "expr"
            }
          }
        },
        "props": {
          "direction": "column",
          "style": {
            "marginBottom": "12px",
            "marginLeft": "15px",
            "marginRight": "15px",
            "marginTop": "10px"
          }
        },
        "type": "ia.container.flex"
      }
    ],
    "custom": {
      "addPhoto": false
    },
    "events": {
      "system": {
        "onShutdown": {
          "config": {
            "script": "\tif self.session.props.theme !\u003d self.view.params.currTheme:\n\t\tthemeMap \u003d {\u0027lightCool\u0027:\u0027hvac\u0027,\u0027darkCool\u0027:\u0027hvac-dark\u0027,\u0027lightWarm\u0027:\u0027hvac-warm\u0027,\u0027darkWarm\u0027:\u0027hvac-dark-warm\u0027}\n\t\tif themeMap[self.session.custom.user.theme] !\u003d self.session.props.theme:\n\t\t\tself.session.props.theme \u003d self.view.params.currTheme"
          },
          "scope": "G",
          "type": "script"
        }
      }
    },
    "meta": {
      "name": "root"
    },
    "propConfig": {
      "custom.userConfig": {
        "binding": {
          "config": {
            "path": "session.custom.user"
          },
          "transforms": [
            {
              "code": "\t# If useBuiltIn is equal to 1, then make the current tab \u0027builtIn\u0027; \n\t# otherwise make the current tab \u0027fromComputer\u0027. Then, return the\n\t# userConfig that was retrieved from the db.\n\t\n\tif value[\u0027usebuiltin\u0027] \u003d\u003d 1:\n\t\tself.getChild(\"Add Photo\").custom.currTab \u003d \u0027builtIn\u0027\n\telse:\n\t\tself.getChild(\"Add Photo\").custom.currTab \u003d \u0027fromComputer\u0027\n\t\n\treturn ({\u0027image\u0027:value[\u0027profileimage\u0027],\u0027imageStr\u0027:value[\u0027imagestr\u0027],\u0027builtIn\u0027:value[\u0027builtin\u0027],\n\t\u0027theme\u0027:value[\u0027theme\u0027],\u0027id\u0027:value[\u0027id\u0027],\u0027title\u0027:value[\u0027title\u0027],\u0027defaultDash\u0027:value[\u0027defaultdash\u0027],\n\t\u0027useBuiltIn\u0027:value[\u0027usebuiltin\u0027]})",
              "type": "script"
            }
          ],
          "type": "property"
        }
      }
    },
    "props": {
      "direction": "column",
      "style": {
        "backgroundColor": "--neutral-30",
        "overflow": "hidden"
      }
    },
    "scripts": {
      "customMethods": [],
      "extensionFunctions": null,
      "messageHandlers": [
        {
          "messageType": "builtInChange",
          "pageScope": true,
          "script": "\t# User has selected one of the four built-in icons.\n\t\t\n\t# Get the selected built-in icon name and the previous \n\t# built-in icon name.\n\tbuiltIn \u003d payload[\u0027builtIn\u0027]\n\tprevBuiltIn \u003d self.custom.userConfig.builtIn if self.custom.userConfig.builtIn !\u003d None else \u0027Person\u0027\n\t\n\t# Find the icon that corresponds to the previous built-in \n\t# icon name, and de-select it.\n\tfor option in self.getChild(\"Add Photo\").getChild(\"Built In Icons\").props.instances:\n\t\tif option[\u0027name\u0027] \u003d\u003d prevBuiltIn:\n\t\t\toption[\u0027selected\u0027] \u003d False\n\t\t\tbreak\n\t\n\t# Find the icon that corresponds to the new built-in \n\t# icon name, and select it.\n\tfor option in self.getChild(\"Add Photo\").getChild(\"Built In Icons\").props.instances:\n\t\tif option[\u0027name\u0027] \u003d\u003d builtIn:\n\t\t\toption[\u0027selected\u0027] \u003d True\n\t\t\tbreak\n\t\n\t# Update the built-in icon name in the userConfig \n\t# custom property.\t\t\t\n\tself.custom.userConfig.builtIn \u003d builtIn",
          "sessionScope": false,
          "viewScope": false
        },
        {
          "messageType": "defaultDashChange",
          "pageScope": true,
          "script": "\t# User\u0027s default dashboard was changed. Update the defaultDash\n\t# custom property to the dashID from the payload.\n\t\n\tdashID \u003d payload[\u0027id\u0027]\n\t\n\tself.custom.userConfig.defaultDash \u003d dashID",
          "sessionScope": false,
          "viewScope": false
        }
      ]
    },
    "type": "ia.container.flex"
  }
}